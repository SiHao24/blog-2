<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jay Zangwill</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://github.com/JayZangwill/blog/"/>
  <updated>2018-03-25T12:02:59.649Z</updated>
  <id>https://github.com/JayZangwill/blog/</id>
  
  <author>
    <name>Jay Zangwill</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搜狗实习总结</title>
    <link href="https://github.com/JayZangwill/blog/2018/03/19/sogou-life/"/>
    <id>https://github.com/JayZangwill/blog/2018/03/19/sogou-life/</id>
    <published>2018-03-19T14:02:27.000Z</published>
    <updated>2018-03-25T12:02:59.649Z</updated>
    
    <content type="html"><![CDATA[<p>转眼间，在搜狗实习已经快一年了，在这得确收获颇丰，所以得总结一下。</p><a id="more"></a><h3 id="日常工作"><a href="#日常工作" class="headerlink" title="日常工作"></a>日常工作</h3><ol><li>负责搜狗网页搜索结果页部分日常需求开发。</li><li>负责搜索app的一些活动页开发。</li><li>负责搜狗英文搜索和搜狗学术搜索全部日常需求开发及一些内部组件日常维护。</li><li>搜狗其他周边需求的开发等。</li></ol><h3 id="工作中遇到的问题"><a href="#工作中遇到的问题" class="headerlink" title="工作中遇到的问题"></a>工作中遇到的问题</h3><p>因为平时工作中主要是html+css这一块的东西，所以遇到最多的问题就是浏览器兼容问题（ie7，ie8）与移动端适配问题。</p><p>下面列举一些工作中常见的一些兼容问题及解决办法：</p><ol><li><p>pc下mac二倍屏图像显示模糊</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">-webkit-image-set</span>(<span class="selector-tag">url</span>(<span class="selector-tag">imgUrl</span>@<span class="keyword">1x</span>) <span class="number">1</span>x,url(imgUrl@<span class="number">2</span>x) <span class="number">2</span>x);</span><br></pre></td></tr></table></figure></li><li><p>ie背景半透明效果（不是opacity哦，opacity会把前景也变透明）</p></li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ieHexStr</span>: ie-hex-str(rgba(<span class="variable">$color</span>,<span class="variable">$alpha</span>));</span><br><span class="line"><span class="attribute">filter</span>:progid:DXImageTransform.Microsoft.gradient(startColorstr=<span class="string">'#&#123;$ieHexStr&#125;'</span>, endColorstr=<span class="string">'#&#123;$ieHexStr&#125;'</span>);</span><br></pre></td></tr></table></figure><ol><li>ie背景平铺</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter: progid:DXImageTransform.Microsoft.AlphaImageLoader(src=$url, sizingMethod='scale')</span><br></pre></td></tr></table></figure><ol><li>ie常用hack（在工作中通常解决一些间距、行高偏差）</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span><br><span class="line"><span class="selector-tag">color</span><span class="selector-pseudo">:green</span>\0;<span class="selector-tag">ie8</span>、9、10、11</span><br><span class="line"><span class="selector-tag">color</span>:<span class="selector-id">#000</span>\9;<span class="selector-tag">ie</span> 8、9、10</span><br><span class="line"><span class="selector-tag">color</span><span class="selector-pseudo">:orange</span>\9\0;<span class="selector-tag">ie9</span>、10</span><br><span class="line">*<span class="selector-tag">color</span><span class="selector-pseudo">:yellow</span>;<span class="selector-tag">ie7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*ie以外浏览器红色 ie11绿色 ie9、10橙色 ie8黑色 ie7黄色*/</span></span><br></pre></td></tr></table></figure><ol><li>ie7下<code>display:inline-block</code>失效</li></ol><p>解决办法：在ie7下<code>display:inline-block</code>只对默认是行内的元素生效，例如a、i、span</p><ol><li>ie7下定位覆盖问题</li></ol><p>有时候我们在定位的时候在其他浏览器下层叠顺序正常，但是在ie7下，无论给这个元素设置多高的z-index都没用，依然还会被另外一个元素覆盖，这是因为ie7下层叠顺序还得看父辈元素，这个时候，可以试试把父辈元素的z-index设高点（这个问题貌似在移动端也有，233）。</p><ol><li>webkit(blink)内核下<code>fixed</code>定位失效。</li></ol><p>看看<code>fixed</code>定位的父辈元素有没有设置<code>transform</code>属性，如果有的话就得去掉，因为在webkit(blink)内核下<code>transform</code>属性会导致<code>fixed</code>定位随着它定位，而不是随着窗口。</p><ol><li>在ios下给背景颜色设置<code>transparent</code>颜色不是变透明，而是变黑</li></ol><p>解决办法：试试<code>rgba(255,255,255,0)</code></p><ol><li>ios下某个元素滚动不顺畅（松手时滚动太僵硬）</li></ol><p>试试<code>-webkit-overflow-scrolling: touch;</code></p><ol><li><code>sticky</code>定位失效</li></ol><p>先确定浏览器版本是不是够新，够新的话检查父辈元素有没有有没有<code>overflow: hidden;</code>，有的话得删掉（sticky定位是个蛮新的定位值，不了解的同学这里有个<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position" target="_blank" rel="noopener">传送门</a>）</p><ol><li>微信小程序<code>textarea</code>组件自动聚焦有bug</li></ol><p>解决办法：沟通换成<code>input</code></p><ol><li>微信小程序雪碧图在真机上定位不准</li></ol><p>解决办法：雪碧图换成<code>image</code></p><ol><li>在做小程序时碰到一个需求：给<code>input</code>框加个<strong>reset</strong>功能，reset完以后要重新聚焦<code>input</code>，但是这个在真机上会有莫名的bug，感兴趣的同学可以试试。</li></ol><p>解决办法：沟通把这个功能去掉</p><ol><li>vm、vh、vmax、vmin在ios safair下宽度是大于视口的</li></ol><p>解决办法：换单位或者用js兼容</p><ol><li>其他一些乱七八糟的问题</li></ol><p>解决办法：利用调试工具快速定位问题（调试工具用的好，什么bug都不怕），如果无法解决（例如只有某种机型有bug），沟通解决（没有什么问题是沟通解决不了的，233）</p><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><ol><li>项目实战经验，使得html+(s)css使用得更熟练（实习前基本都是用bootstrap的样式233）</li><li>更注重html语义化</li><li>html+css+js基础加强，写出的代码质量更高</li><li>熟悉了公司开发、合作流程</li><li>将psd还原成页面更熟练，精度更高</li><li>接触了pixi.js、bodmovin.js等一些动画库，更熟悉了canvas的一些原生操作</li><li>考虑问题更全面</li><li>emm…</li></ol><h3 id="实习以前没见过的一些css属性"><a href="#实习以前没见过的一些css属性" class="headerlink" title="实习以前没见过的一些css属性"></a>实习以前没见过的一些css属性</h3><ol><li>css多行截断</li></ol><p>在实习前只知道怎么用css做单行截断，但是却不知到怎么用css做多行截断，css多行截断代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">display: -webkit-box;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">-webkit-line-clamp: 3; /*超出多少行开始截断*/</span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure></p><p>可以看到，前面加有-webkit-前缀，所以考虑到兼容性，目前只能用于移动端</p><ol><li>-webkit-tap-highlight-color</li></ol><p>这是用于改变a链接点击高亮的颜色</p><ol><li>-webkit-overflow-scrolling: touch</li></ol><p>在ios下设置了<code>overflow:scroll</code>的元素使其有惯性滚动效果。关于此属性的更多可以查看<a href="http://www.cnblogs.com/chris-oil/p/6164966.html" target="_blank" rel="noopener">这里</a></p><ol><li>filter: blur()</li></ol><p>一个高斯模糊属性</p><ol><li>filter: grayscale();</li></ol><p>一个能使元素变灰的属性，一般用于图片上，使图片变灰。<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/filter" target="_blank" rel="noopener">更多filter的操作</a></p><p>…其他的等我想起再加吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转眼间，在搜狗实习已经快一年了，在这得确收获颇丰，所以得总结一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="基础" scheme="https://github.com/JayZangwill/blog/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="心情" scheme="https://github.com/JayZangwill/blog/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli-multipage</title>
    <link href="https://github.com/JayZangwill/blog/2018/03/06/vue-cli-multipage/"/>
    <id>https://github.com/JayZangwill/blog/2018/03/06/vue-cli-multipage/</id>
    <published>2018-03-06T03:40:12.000Z</published>
    <updated>2018-03-19T13:55:03.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于vue-cli的多页面应用脚手架"><a href="#基于vue-cli的多页面应用脚手架" class="headerlink" title="基于vue-cli的多页面应用脚手架"></a>基于vue-cli的多页面应用脚手架</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://jayzangwill.github.io/blog/2018/03/06/vue-cli-multipage/#more" target="_blank" rel="noopener">原文</a></p><p><a href="https://juejin.im/post/5a9e1716f265da237a4c85f9" target="_blank" rel="noopener">掘金</a></p><p><a href="https://zhuanlan.zhihu.com/p/34272390" target="_blank" rel="noopener">知乎</a>&amp;<a href="https://zhuanlan.zhihu.com/jayzangwill" target="_blank" rel="noopener">知乎专栏</a></p><p>目前vue-cli生成的配置都是做多页面的，然而，我们有时也会有多页面的需求。<br>同时，之前借用的<a href="https://github.com/breezefeng/vue-cli-multipage">这个</a>多页面例子貌似作者不再维护了，导致webpack升级到webpack2就无法使用了，所以我就参考这个例子自己弄了个多页面脚手架，会不定期维护的。</p><p>代码地址：<a href="https://github.com/JayZangwill/vue-multipage">https://github.com/JayZangwill/vue-multipage</a><br>有什么问题可以在issues上提，欢迎star</p><a id="more"></a><h2 id="下载-amp-使用"><a href="#下载-amp-使用" class="headerlink" title="下载&amp;使用"></a>下载&amp;使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/JayZangwill/vue-multipage</span><br><span class="line"><span class="built_in">cd</span> vue-multipage</span><br><span class="line">npm i</span><br><span class="line"></span><br><span class="line">//开发模式（运行完后要在浏览器输入http://localhost:8081/module/index）</span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line">//生产模式</span><br><span class="line">npmrun build</span><br></pre></td></tr></table></figure><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vue-multipage</span><br><span class="line">  |---build</span><br><span class="line">  |---config</span><br><span class="line">  |---src</span><br><span class="line">    |---assets   </span><br><span class="line">    |---components  组件</span><br><span class="line">      |---HelloWorld.vue</span><br><span class="line">      |---other.vue</span><br><span class="line">    |---module多页面模块</span><br><span class="line">      |---index  </span><br><span class="line">        |---index.html</span><br><span class="line">        |---index.js</span><br><span class="line">        |---App.vue</span><br><span class="line">      |---other</span><br><span class="line">        |---index.html</span><br><span class="line">        |---other.js</span><br><span class="line">        |---App.vue</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>如需添加页面需要在<strong>module</strong>目录下新建文件夹，然后文件夹里必须包括<code>.hmtl，.js，.vue</code>文件作为入口文件。</p><p>运行<code>npm run dev</code>命令后，需要在浏览器输入<code>http://localhost:8081/module/+module下目录文件夹名/+文件夹名里的html文件</code></p><h2 id="已知bug"><a href="#已知bug" class="headerlink" title="已知bug"></a>已知bug</h2><ol><li>目前公用css还无法分离</li><li>开发模式需要手动输入url打开页面，不能直接打开。</li></ol><p>同时也欢迎提代码pull来帮助我解决bug</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cnblogs.com/fengyuqing/p/vue_cli_webpack.html" target="_blank" rel="noopener">vue-cli + webpack 多页面实例应用</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基于vue-cli的多页面应用脚手架&quot;&gt;&lt;a href=&quot;#基于vue-cli的多页面应用脚手架&quot; class=&quot;headerlink&quot; title=&quot;基于vue-cli的多页面应用脚手架&quot;&gt;&lt;/a&gt;基于vue-cli的多页面应用脚手架&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://jayzangwill.github.io/blog/2018/03/06/vue-cli-multipage/#more&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5a9e1716f265da237a4c85f9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;掘金&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/34272390&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;知乎&lt;/a&gt;&amp;amp;&lt;a href=&quot;https://zhuanlan.zhihu.com/jayzangwill&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;知乎专栏&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前vue-cli生成的配置都是做多页面的，然而，我们有时也会有多页面的需求。&lt;br&gt;同时，之前借用的&lt;a href=&quot;https://github.com/breezefeng/vue-cli-multipage&quot;&gt;这个&lt;/a&gt;多页面例子貌似作者不再维护了，导致webpack升级到webpack2就无法使用了，所以我就参考这个例子自己弄了个多页面脚手架，会不定期维护的。&lt;/p&gt;
&lt;p&gt;代码地址：&lt;a href=&quot;https://github.com/JayZangwill/vue-multipage&quot;&gt;https://github.com/JayZangwill/vue-multipage&lt;/a&gt;&lt;br&gt;有什么问题可以在issues上提，欢迎star&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://github.com/JayZangwill/blog/tags/vue/"/>
    
      <category term="vue-cli" scheme="https://github.com/JayZangwill/blog/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>记一次我看红宝书对继承加深的理解</title>
    <link href="https://github.com/JayZangwill/blog/2018/02/27/inherit/"/>
    <id>https://github.com/JayZangwill/blog/2018/02/27/inherit/</id>
    <published>2018-02-27T02:44:29.000Z</published>
    <updated>2018-03-19T13:55:03.453Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://zhuanlan.zhihu.com/p/34123800" target="_blank" rel="noopener">知乎</a></p><p>趁着目前手头上没啥事，赶紧写篇文章，emm…。</p><p>红宝书不愧是红宝书，每看一次都会有新的收获，呃，废话不多说，直接进入正题吧。</p><p>此文章默认您已经对原型、原型链、对象实例、new的过程有了一定的理解，如不理解的请自行查阅相关资料。</p><p>另外，以下实例代码变量名、函数、变量值名我做了一定的修改，其大体思路和红宝书里的一样。</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>在红宝书中，给出了以下继承方式：</p><ol><li>原型链实现继承</li><li>借用构造函数</li><li>组合继承</li><li>原型式继承</li><li>寄生式继承</li><li>寄生组合式继承</li></ol><p>接下来就一一对它们进行分析。</p><h3 id="原型链实现继承"><a href="#原型链实现继承" class="headerlink" title="原型链实现继承"></a>原型链实现继承</h3><p>话不多说，先上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.parent = <span class="string">'parent'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getParent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.son = <span class="string">'son'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Parent(); <span class="comment">//这句代码是实现继承的核心</span></span><br><span class="line">Son.prototype.getSon = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.son;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其思路就是让儿子的原型对象等于父亲new出来的实例；我们知道new出来的实例对象上会有其构造函数拥有的一系列属性。让儿子的原型等于这个实例自然就继承了父亲的一系列东西。</p><p>这个时候我们运行：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line">son.getParent(); <span class="comment">//parent</span></span><br><span class="line">son.getSon(); <span class="comment">//son</span></span><br></pre></td></tr></table></figure></p><p>以上代码能正常运行的。</p><p>这个时候<code>son.constructor</code>是指向<code>Parent</code>的，因为<code>new Parent</code>出来的对象的<code>constructor</code>是指向<code>Parent</code>的，然后Son的<code>prototype</code>对象指向了这个new出来的对象，所以Son的<code>constructor</code>自然指向<code>Parent</code>。</p><p>这个时候我们来梳理一下它们之间的关系：</p><p><code>son.__proto__ =&gt; Son.prototype =&gt; Parent new出来的实例对象.__proto__ =&gt; Parent.prototype</code></p><p>因此当调用son.getParent()时实际上会经历三个搜索步骤：</p><ol><li>搜索son</li><li>搜索son.<strong>proto</strong>（也就是new Parent()这个对象）</li><li>搜索son.<strong>proto</strong>.<strong>proto</strong>（也就是new Parent().<strong>proto</strong>即Parent.prototype）</li></ol><p>但是，使用原型链实现继承会有缺点，先上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Parent()&#123;</span><br><span class="line">    this.child = [1]</span><br><span class="line">&#125;</span><br><span class="line">function Son() &#123;&#125;</span><br><span class="line">Son.prototype = new Parent();</span><br><span class="line">var son1 = new Son();</span><br><span class="line">son1.child.push(2);</span><br><span class="line">var son2 = new Son();</span><br><span class="line">son2.child.push(3);</span><br><span class="line">son2.child //[1,2,3]</span><br></pre></td></tr></table></figure></p><p>出现这种情况的原因是，所有实例都<strong>共享</strong>构造函数的prototype。</p><p>这个可以通过<code>son1.__proto__ === son2.__proto__ //true</code>和<code>son1.child === son2.child //true</code>来证明</p><p>为了解决这种问题，于是就出现了以下的方法：借用构造函数。</p><h3 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h3><p>惯例，先上代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.child = [<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">this</span>.getChild = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.child;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son1 = <span class="keyword">new</span> Son();</span><br><span class="line">son1.child.push(<span class="number">2</span>);</span><br><span class="line">son1.child <span class="comment">//[1,2]</span></span><br><span class="line"><span class="keyword">var</span> son2 = <span class="keyword">new</span> Son();</span><br><span class="line">son2.child.push(<span class="number">3</span>);</span><br><span class="line">son2.child <span class="comment">//[1,3]</span></span><br></pre></td></tr></table></figure></p><p>可以看到，以上的引用问题解决了，但是，出现了一个与构造函数模式一样的问题，方法都在构造函数中定义，导致函数不能复用，所以，继续升级。</p><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.child = [<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.getChild = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.child;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.friend = <span class="string">'Jay Zangwill'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Son.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line">Son.prototype.getFriend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.friend;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son1 = <span class="keyword">new</span> Son();</span><br><span class="line">son1.child.push(<span class="number">2</span>);</span><br><span class="line">son1.getChild(); <span class="comment">//[1,2]</span></span><br><span class="line"><span class="keyword">var</span> son2 = <span class="keyword">new</span> Son();</span><br><span class="line">son2.getChild(); <span class="comment">//[1]</span></span><br><span class="line">son2.getFriend(); <span class="comment">// Jay Zangwill</span></span><br></pre></td></tr></table></figure><p>这个方法解决了原型链继承的引用bug同时也解决了函数复用的问题，但是缺点也很明显，那就是调用了两次<code>Parent</code>函数，最终导致实例对象上有<code>child</code>属性原型链上也有这个属性。</p><p>在介绍升级方法前先介绍两种基础方法。</p><h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> original = &#123;</span><br><span class="line">    child:[<span class="number">1</span>],</span><br><span class="line">    name:<span class="string">'Jay Zangwill'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parent</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    F.prototype = obj</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son1 = parent(original);</span><br><span class="line">son1.child.push(<span class="number">2</span>);</span><br><span class="line">son1.name = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">var</span> son2 = parent(original);</span><br><span class="line">son2.child.push(<span class="number">3</span>);</span><br><span class="line">son2.child <span class="comment">//[1,2,3];</span></span><br><span class="line">son2.name = <span class="string">'b'</span>;</span><br><span class="line">son1.name <span class="comment">//a</span></span><br><span class="line">son2.name <span class="comment">//b</span></span><br></pre></td></tr></table></figure><p>这种继承方式得需要一个原始对象作为参考，这个方式的主要目的是与另一个对象保持类似。<br>在es5中新增了一个Object.create()方法来实现原型式继承，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener">传送门</a>。</p><h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><p>寄生式继承是原型式继承的增强版：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clone = parent(obj);</span><br><span class="line">    clone.getChild = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.child;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个方法与借用构造函数方法有个共同的缺点，就是方法没法复用。</p><h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    F.prototype = obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherirPrototype</span>(<span class="params">parent,son</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prototype = createObj(parent.prototype);</span><br><span class="line">    prototype.constructor = son;</span><br><span class="line">    son.prototype = prototype;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.child = [<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.getChild= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.child;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>,name);</span><br><span class="line">    <span class="keyword">this</span>.friend = [<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inherirPrototype(Parent,Son);</span><br><span class="line"></span><br><span class="line">Son.prototype.getFriend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.friend;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son1 = <span class="keyword">new</span> Son(<span class="string">'Jay'</span>);</span><br><span class="line">son1.child.push(<span class="number">2</span>);</span><br><span class="line">son1.getChild() <span class="comment">//[1,2];</span></span><br><span class="line">son2=<span class="keyword">new</span> Son(<span class="string">'Zangwill'</span>);</span><br><span class="line">son2.child.push(<span class="number">3</span>);</span><br><span class="line">son2.getChild() <span class="comment">//[1,3]</span></span><br><span class="line">son2.getFriend() <span class="comment">//[2]</span></span><br></pre></td></tr></table></figure><p>可以看到上面代码只调用了一次<code>Parent</code>没有生成多余的属性，同时还解决了使用原型方法时Son不能向Parent传值的问题，也没有属性引用的问题。</p><p>寄生组合式继承的大体思路是，通过借用构造函数模式来继承属性，通过原型链来继承方法。通过原型链继承方法无非就是想要得到父类的<code>prototype</code>对象，所以我们得想办法来拿到这个副本。而<code>createObj</code>函数就是干这事的。</p><p>可能有人会问：<code>var prototype = createObj(parent.prototype);</code>这句代码直接改成<code>var prototype = parent.prototype</code>不行吗？</p><p>答案是：肯定不行，要是这么改，要想在<code>Son.prototype</code>上加东西也会间接加到<code>Parent.prototype</code>上。</p><p>不过，在es5中，可以把<code>var prototype = createObj(parent.prototype);</code>换成<code>var prototype = Object.create(parent.prototype);</code></p><p>它们之间的关系如下：</p><p><code>实例(也就是son1和son2).__proto__ =&gt; Son.prototype =&gt; 中间函数的实例(也就是F).__proto__ =&gt; 中间函数.prototype =&gt; Parent.prototype</code></p><h3 id="es6中的继承"><a href="#es6中的继承" class="headerlink" title="es6中的继承"></a>es6中的继承</h3><p>在es6中，引入了<code>class</code>，这相当于是一个语法糖，这里我就直接上代码不展开说了，想要了解更多的话进入<a href="http://es6.ruanyifeng.com/#docs/class" target="_blank" rel="noopener">传送门</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    getName()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    getAge()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> son = <span class="keyword">new</span> Son(<span class="string">'Jay'</span>, <span class="number">18</span>);</span><br><span class="line">    son.getAge() <span class="comment">//18</span></span><br><span class="line">    son.getName(); <span class="comment">//Jay</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/34123800&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;趁着目前手头上没啥事，赶紧写篇文章，emm…。&lt;/p&gt;
&lt;p&gt;红宝书不愧是红宝书，每看一次都会有新的收获，呃，废话不多说，直接进入正题吧。&lt;/p&gt;
&lt;p&gt;此文章默认您已经对原型、原型链、对象实例、new的过程有了一定的理解，如不理解的请自行查阅相关资料。&lt;/p&gt;
&lt;p&gt;另外，以下实例代码变量名、函数、变量值名我做了一定的修改，其大体思路和红宝书里的一样。&lt;/p&gt;
    
    </summary>
    
    
      <category term="基础" scheme="https://github.com/JayZangwill/blog/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="javascript" scheme="https://github.com/JayZangwill/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>四月北京面试之旅</title>
    <link href="https://github.com/JayZangwill/blog/2017/04/25/Interview%20in%20Beijing%20in%20April/"/>
    <id>https://github.com/JayZangwill/blog/2017/04/25/Interview in Beijing in April/</id>
    <published>2017-04-25T02:25:36.000Z</published>
    <updated>2018-03-19T13:55:03.433Z</updated>
    
    <content type="html"><![CDATA[<p>此次面试之旅虽然只面试了两家，但是在这其中学到了蛮多同时也意识到了自己的很多不足。</p><p>以下面试情况都是凭着记忆中的印象写的，面试的问题要比我写的多，我就写些印象深刻的。</p><a id="more"></a><h3 id="搜狗"><a href="#搜狗" class="headerlink" title="搜狗"></a>搜狗</h3><p>感觉能拿到搜狗的面试机会个人觉得有运气也有实力吧。刚开始先是在拉钩上投了搜狗的这个前端重构师这个职位(这个职位注重html,css基础)，没过几天搜狗就给我打电话来了，那时还是中午，我在午休，突然接到一个电话说是搜狗的。当时我吓得脑子一片空白(出现这个情况的原因是身为一个末流二本的学生居然这么快接到了大公司的面试。爱情来的太快就像龙卷风，让我防不胜防)。稍微整理好心情以后(当时还在没睡醒的状态)，面试官开始问我一些基础问题：</p><p>面试官：清除浮动的原理</p><p>睡眼朦胧的我(答了怎么清除浮动)：我常用的有两种方法一种是<code>overflow:hidden</code>还有一种就是用<code>:after</code>清除浮动(这个方法相信大家都懂，我就不写了)…</p><p>面试官：你好像有点紧张啊，我问的是原理，你给我答怎么清除浮动？</p><p>我：(中间我还答了些有的没的这里就省略了)哦！<code>overflow:hidden</code>创建了<code>BFC</code>利用<code>BFC</code>计算高度的时候浮动元素也要计算在内。<code>:after</code>是利用了父元素必须把非浮动元素的位置考虑进去(支支吾吾的答完了这题)。</p><p>面试官：怎么创建<code>BFC</code>？</p><p>我：<code>overflow:hidden</code>，<code>visibility</code>不为<code>visible</code>，定位(其实是<code>position</code>为<code>absolute</code>或<code>fixed</code>);</p><p>面试官：你平时都用哪些自动化工具，都用它们的什么插件？</p><p>我：用<code>gulp</code>像图片压缩，js、css压缩合并，文件连接，<code>bable</code>，<code>js-hit</code>。</p><p>面试官：这样吧，我给你发一个设计图过去，你把它还原成网页…(省略)。</p><p>不久，面试官给我发来了设计图，于是我就开始做了，第二天这样给面试官发过去了。没想到面试官当天就给我回信给我点评了一些不足，还说可以不用做这么快的(这让我万万没想到啊，还有点评)，于是我又按照点评改了改，再在此之上加了些优化，过了两天给面试官发过去了。大概等了1,2个星期没音，我以为是跪了。没想到又过了几天面试官给我打电话邀请我到搜狐大厦去面试(超高兴，能去参观参观大厂，去那面试)。</p><p>按照约定时间我来到了搜狐网络大厦(本来想提前15分钟这样到的，没想到突然犯路痴，结果刚好是约定的时间到)…省略一些有的没的，直接进入面试吧：</p><p>面试官：自我介绍下吧。</p><p>我：balabala</p><p>面试官：如何实现左边图片右边文字的布局，都是不定宽的。</p><p>我：(省略一些有的没的回答)给它们都加上浮动。</p><p>面试官：这样不行</p><p>我：（惊讶脸）啊！不行？！我现在暂时想不到其他方法了。</p><p>面试官：不考虑浏览器兼容性呢？</p><p>我：啊！可以用<code>flex</code>，后面还balabala一些有的没的让面试官对答案不满意了，其实在父容器加个<code>display:flex</code>就得了。</p><p>中间一些项目的问答。</p><p>面试官：你平时切图切出来的图片都保存为什么格式，为什么？</p><p>我：保存为png-24，因为它比较小(这里答得不理想啊，应该是png压缩后比jpg小，而且png是无损压缩，jpg是有损压缩)</p><p>面试官：你平时有没有用过什么工具来提高的的开发效率？</p><p>我：(和上面电话面试的回答差不多)</p><p>面试官可能是看上面我的回答不怎么好于是拿出几道js题给我做。</p><p>第一题大概是这样的(考察作用域)：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=b=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> c=<span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> d=fun(a);</span><br><span class="line"><span class="built_in">console</span>.log(a,b,<span class="keyword">typeof</span> c,<span class="keyword">typeof</span> d,<span class="keyword">typeof</span> e)</span><br></pre></td></tr></table></figure></p><p>题目大概是这样，记不太清了，做出来以后和面试官解释为什么会这样。<br>答案是：1 2 undefined function undefined，至于为什么会这样我就不多说了，稍微有点基础的同学应该能一眼看出来。</p><p>第二题：给不支持es5的浏览器写一个Array，prototype.map：</p><p>答案：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">Array</span>，prototype.map)&#123;</span><br><span class="line">    <span class="built_in">Array</span>，prototype.map=<span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> len=<span class="keyword">this</span>.length,</span><br><span class="line">            i=<span class="number">0</span>,</span><br><span class="line">            result=[];</span><br><span class="line">        <span class="keyword">for</span>(;i&lt;len;i++)&#123;</span><br><span class="line">        result.push(fn.call(<span class="keyword">this</span>,<span class="keyword">this</span>[i],i,<span class="keyword">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="去哪儿"><a href="#去哪儿" class="headerlink" title="去哪儿"></a>去哪儿</h3><h4 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h4><p>项目的一些问答</p><p>面试官：ajax的过程</p><p>我：先打开请求的地址，然后发送请求，然后处理数据并将数据反馈到页面。</p><p>面试官：假设我有一个ul，里面有好多个li，我如何知道用户点了哪个？</p><p>我：在ul上绑一个点击事件，利用回调函数的e参数的target获取用户点的li，然后获取这个ul里面的li用slice转为真正的数组，调用数组的indexOf(e.target)就知道用户点了哪个</p><p>代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ul=<span class="built_in">document</span>.getElementById(<span class="string">'ul'</span>),</span><br><span class="line">    li=ul.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line">    ul.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log([].slice.call(li).indexOf(e.target));</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>面试官：如果我li里面套了一个span，这个时候我又怎么知道用户点了第几个span</p><p>我：直接把上面的li换成span</p><p>面试官：你知不知道这个时候的<code>e.currentTarget</code>指向谁，为什么？</p><p>我：ul，因为<code>e.currentTarget</code>指的是当前被绑定事件的元素。</p><p>面试官：new的过程</p><p>我：首先会新创建一个对象，然后将构造函数的<code>prototype</code>赋值给新创建对象的<code>__proto__</code>，将构造函数的<code>this</code>指向这个对象，并执行构造函数里的代码，最后判断返回值(如果返回值是简单数据类型直接返回新创建的对象，如果是复杂数据类型会返回这个复杂数据类型)</p><p>面试官：Promise的三个状态？</p><p>我：pedding resolve reject…(省略)</p><p>面试官：实现继承的方法？</p><p>我：(回来在写这篇文章的时候翻看发现自己答得不是很理想)，可以看看高程的162-173页的继承。</p><p>面试官：http的状态码常用的有哪些？</p><p>我：(这个我就不打在这了，问题太过于简单)贴个<a href="http://www.cnblogs.com/loveyakamoz/archive/2011/09/03/2165266.html" target="_blank" rel="noopener">链接</a></p><p>面试官：我现在第一次载入这个网页以后按刷新，这个时候会出现哪些状态码？</p><p>我：(我觉得面试官应该是问缓存会出现哪些状态码)于是我就答200(from memory cache) 和304，并和面试官解释这两个的差异；前者是直接从cache里面获取后者是向服务端发出确认没变然后再从cache里面取的。</p><p>面试官：假如现在我有一个数组[1,2,3,4,5,6,7,9]我想知道8应该在数组的哪个位置该怎么做？</p><p>我：把这个8<code>push</code>到数组里，排序，然后indexOf(8)</p><p>面试官：还有更好的办法吗？</p><p>我：没了(寻求更好的办法)。</p><p>面试官：css的优先级是怎么样的？</p><p>我：important&gt;id&gt;class&gt;element然后，内嵌&gt;内联&gt;外联</p><p>面试官：我css有两个类c1和c2，他们内部分别定义了<code>background-color:red</code>和<code>background-color:green</code>把它们同时加到一个div上，这个时候他们的背景颜色是什么颜色？</p><p>我：这个取决于这两个类在css文件中定义的位置了，谁靠后就取谁的颜色。</p><p>面试官：我先定义c1在定义c2</p><p>我：那就是green了</p><p>面试官：如果我给这个div外面再套个div这个div类名为box，我在css文件中修改c1为<code>.box .c1</code>，这个时候颜色是啥？</p><p>我：那就是red了(为什么会这样就不用我多说了，相信大家都知道)</p><p>有了解过AMD/CMD、commonJS吗</p><p>我：(回答的大致意思在<a href="http://www.jianshu.com/p/d67bc79976e6" target="_blank" rel="noopener">这里</a>)</p><p>一面下来感觉就是碾压，问的东西非常基础，面试官看起来也特别满意，于是就让我去二面。</p><h4 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h4><p>上来就让我手写快排，还好之前有复习，不过久没写字了，写得比较慢，最后没写完，不过我和面试官讲解了思路，面试官看起来貌似蛮满意。</p><p>面试官：你给我介绍一些网络的知识吧。</p><p>我：balabala。</p><p>面试官：网络七层协议？</p><p>我：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层</p><p>面试官：你操作系统怎么样？</p><p>我：这方面比较弱。</p><p>面试官：你给我介绍一下多进程和死锁吧。</p><p>我：…</p><p>面试官：如何证明node是单线程的？</p><p>我：给两段代码中间加个循环次数特别多的循环(这个问题没回答好，可以参考《了不起的Node js 将JavaScript进行到底》27页的例子)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> start=<span class="built_in">Date</span>.now();</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Date</span>.now()-start);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">1000000000</span>;i++)&#123;&#125;</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Date</span>.now()-start);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure><p>面试官：最近有学什么新技术吗？</p><p>我：es6、了解了es7的async await还有最新的清除浮动的方法<a href="http://www.w3cplus.com/css3/display-flow-root.html" target="_blank" rel="noopener">display:flow-root</a></p><p>接下来的一些问题记不太清了。。总之，二面被虐得很惨。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此次面试之旅虽然只面试了两家，但是在这其中学到了蛮多同时也意识到了自己的很多不足。&lt;/p&gt;
&lt;p&gt;以下面试情况都是凭着记忆中的印象写的，面试的问题要比我写的多，我就写些印象深刻的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://github.com/JayZangwill/blog/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="心情" scheme="https://github.com/JayZangwill/blog/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>常用的mongodb命令</title>
    <link href="https://github.com/JayZangwill/blog/2017/04/10/mongodb%20common%20command/"/>
    <id>https://github.com/JayZangwill/blog/2017/04/10/mongodb common command/</id>
    <published>2017-04-10T10:57:18.000Z</published>
    <updated>2018-03-19T13:55:03.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下面是一些我常用的mongodb命令，供自己备忘"><a href="#下面是一些我常用的mongodb命令，供自己备忘" class="headerlink" title="下面是一些我常用的mongodb命令，供自己备忘"></a>下面是一些我常用的mongodb命令，供自己备忘</h1><a id="more"></a><ol><li>show dbs （列出所有数据库）</li><li>use [database name] （数据库的切换）</li><li>show collections （查看当前使用数据库有哪些表）</li><li>db.[表名].find() （查找当前表下所有数据）</li><li>db.[表名].findOne({‘key’:value}) （查找一条符合查询条件的数据）</li><li>db.[表名].drop() （删除当前表）</li><li>db.[表名].move({‘key’:value}) （根据条件删除数据）</li><li>help （输出mongodb的帮助）</li><li>db help() （数据库的帮助命令）</li></ol><p><a href="http://blog.csdn.net/u010305706/article/details/48129131" target="_blank" rel="noopener">关于mongodb更多</a></p><h1 id="node与mongodb交互"><a href="#node与mongodb交互" class="headerlink" title="node与mongodb交互"></a>node与mongodb交互</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 插入操作</span><br><span class="line">function insertDocuments(db, data, callback) &#123;</span><br><span class="line">let collection = db.collection(&apos;documents&apos;);</span><br><span class="line">collection.insertOne(data, (err, result) =&gt; &#123;</span><br><span class="line">assert.equal(err, null);</span><br><span class="line">callback(result);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 查找操作</span><br><span class="line">function findDocuments(db, callback, search) &#123;</span><br><span class="line">search = search || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">// Get the documents collection</span><br><span class="line">let collection = db.collection(&apos;documents&apos;);</span><br><span class="line">// Find some documents</span><br><span class="line">collection.find(search).toArray((err, docs) =&gt; &#123;</span><br><span class="line">assert.equal(err, null);</span><br><span class="line">callback(docs);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 更新操作</span><br><span class="line">function updateDocument(db, userinfo, money, callback) &#123;</span><br><span class="line"></span><br><span class="line">// Get the documents collection</span><br><span class="line">let collection = db.collection(&apos;documents&apos;);</span><br><span class="line"></span><br><span class="line">collection.updateOne(&#123;</span><br><span class="line">idCard: userinfo</span><br><span class="line">&#125;, &#123;</span><br><span class="line">$set: &#123;</span><br><span class="line">money: money</span><br><span class="line">&#125;</span><br><span class="line">&#125;, (err, result) =&gt; &#123;</span><br><span class="line">assert.equal(err, null);</span><br><span class="line">callback(result);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function deleteDocument(db, userinfo, callback) &#123;</span><br><span class="line">  // Get the documents collection</span><br><span class="line">  let collection = db.collection(&apos;documents&apos;);</span><br><span class="line">  collection.deleteOne(&#123; idCard: userinfo &#125;, (err, result) =&gt; &#123;</span><br><span class="line">    callback(result);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/mongodb/node-mongodb-native">更多node与mongodb交互</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;下面是一些我常用的mongodb命令，供自己备忘&quot;&gt;&lt;a href=&quot;#下面是一些我常用的mongodb命令，供自己备忘&quot; class=&quot;headerlink&quot; title=&quot;下面是一些我常用的mongodb命令，供自己备忘&quot;&gt;&lt;/a&gt;下面是一些我常用的mongodb命令，供自己备忘&lt;/h1&gt;
    
    </summary>
    
    
      <category term="mongodb" scheme="https://github.com/JayZangwill/blog/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>几个让我印象深刻的面试题(二)</title>
    <link href="https://github.com/JayZangwill/blog/2017/03/19/Some%20of%20the%20interview%20questions%20that%20impressed%20me-2/"/>
    <id>https://github.com/JayZangwill/blog/2017/03/19/Some of the interview questions that impressed me-2/</id>
    <published>2017-03-19T07:19:04.000Z</published>
    <updated>2018-03-19T13:55:03.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://jayzangwill.github.io/blog/2017/03/19/Some%20of%20the%20interview%20questions%20that%20impressed%20me-2/" target="_blank" rel="noopener">原文地址</a>&amp;&amp;<a href="https://jayzangwill.github.io/blog/" target="_blank" rel="noopener">我的博客</a><br><a href="https://zhuanlan.zhihu.com/p/25863288" target="_blank" rel="noopener">知乎</a>&amp;&amp;<a href="https://zhuanlan.zhihu.com/jayzangwill" target="_blank" rel="noopener">知乎专栏</a><br><a href="http://link.zhihu.com/?target=http%3A//www.jianshu.com/p/65319f42a5ce" target="_blank" rel="noopener">简书</a><br><a href="http://henanjs.org/" target="_blank" rel="noopener">河南前端交流群官网</a></p><p>上次写了一篇<a href="https://jayzangwill.github.io/blog/2017/03/01/Some%20of%20the%20interview%20questions%20that%20impressed%20me-1/" target="_blank" rel="noopener">几个让我印象深刻的面试题(一)</a>没看过的同学可以去看哦。<br>这次文章的题目来源：<a href="https://juejin.im/post/58c51b5c44d90400698da686" target="_blank" rel="noopener">这里有超过20家的前端面试题，你确定不点进来看看？</a>。<br>如果上面的问题在我这篇文章里没有提到的话，那就说明有些问题可以很容易查得到或者很简单或者我能力有限不能解答出来的。如果有的问题你不会而且我又没有提的那就认为就是我能力有限不能解答出来吧。嘿嘿嘿。开个玩笑，不过可以在下面留言哦！</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>还是老规矩先给题目，然后在看我的答案，有什么意见可以在留言板提。</p><ol><li>请问a，b，c分别输出什么？</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n,o</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(o)</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      fun:<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> fun(m,n);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = fun(<span class="number">0</span>); a.fun(<span class="number">1</span>); a.fun(<span class="number">2</span>); a.fun(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> b = fun(<span class="number">0</span>).fun(<span class="number">1</span>).fun(<span class="number">2</span>).fun(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> c = fun(<span class="number">0</span>).fun(<span class="number">1</span>); c.fun(<span class="number">2</span>); c.fun(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ol><li>用尽可能多的方法找出数组中重复出现过的元素</li></ol><p>例如：[1，2，4，4，3，3，1，5，3]</p><p>输出：[1，3，4]</p><ol><li>给定一些文档（docs）、词（words），找出词在文档中全部存在的所有文档</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> docs = [&#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        words: [<span class="string">'hello'</span>,<span class="string">"world"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="number">2</span>,</span><br><span class="line">        words: [<span class="string">'hello'</span>,<span class="string">"kids"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="number">3</span>,</span><br><span class="line">        words: [<span class="string">'zzzz'</span>,<span class="string">"hello"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="number">4</span>,</span><br><span class="line">        words: [<span class="string">'world'</span>,<span class="string">"kids"</span>]</span><br><span class="line">    &#125;</span><br><span class="line"> ];</span><br><span class="line">findDocList(docs,[<span class="string">'hello'</span>]) <span class="comment">//文档1，文档2，文档3</span></span><br><span class="line">findDocList(docs,[<span class="string">'hello'</span>,<span class="string">'world'</span>]) <span class="comment">//文档1</span></span><br></pre></td></tr></table></figure><ol><li>下面代码会输出什么？</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = (<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;(<span class="number">1</span>,<span class="number">2</span>)));</span><br><span class="line"><span class="built_in">console</span>.log(test(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><ol><li>不用循环，创建一个长度为 100 的数组，并且每个元素的值等于它的下标。</li><li>一个整数，它的各位数字如果是左右对称的，则这个数字是对称数。那么请找出 1 至 10000 中所有的对称数</li><li><p>以下代码输出结果是什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    foo: <span class="string">"bar"</span>,</span><br><span class="line">    func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'outer func : this.foo'</span> + <span class="keyword">this</span>.foo);</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'outer func : self.foo'</span> + self.foo);</span><br><span class="line">         (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="string">'inner func : this.foo'</span> + <span class="keyword">this</span>.foo);</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="string">'inner func : self.foo'</span> + self.foo);</span><br><span class="line">         &#125;)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">myObject.func();</span><br></pre></td></tr></table></figure></li><li><p>请写出以下正则表达式的详细规则说明<br>/^(0[1-9]\d\d?)?[1-9]\d{6}\d?$/<br>/^(1[89]|[2-9]\d|100)$/i<br>/^[\w-]+@[a-z0-9-]+({[a-z]{2,6}}){1,2}$/i</p></li><li>请写出打乱数组方法</li><li>写出element.getElementsByClassName 的实现方法</li><li><p>请写出代码输出结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!(<span class="string">"a"</span> <span class="keyword">in</span> <span class="built_in">window</span>))&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">alert(a);</span><br></pre></td></tr></table></figure></li><li><p>请写出代码输出结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">var</span> tmp = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">        b = a + b;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">alert(handle(<span class="number">4</span>)(<span class="number">5</span>)(<span class="number">6</span>));</span><br></pre></td></tr></table></figure></li><li><p>javscript表达式”[]==’’”的值是什么，为什么？</p></li><li><p>Js生成下面html，点击每个li的时候弹出1,2,3……<br>//li onclick事件都能弹出当前被点击的index=?</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"testUrl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>index=0<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>index=1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>map方法是ES5中新增的，要求为ES5以下的环境增加个map方法</p></li></ol><h2 id="答案揭晓"><a href="#答案揭晓" class="headerlink" title="答案揭晓"></a>答案揭晓</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">n,o</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(o)</span><br><span class="line">   <span class="keyword">return</span>&#123;</span><br><span class="line">       fun:<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> fun(m,n);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = fun(<span class="number">0</span>); a.fun(<span class="number">1</span>); a.fun(<span class="number">2</span>); a.fun(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> b = fun(<span class="number">0</span>).fun(<span class="number">1</span>).fun(<span class="number">2</span>).fun(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> c = fun(<span class="number">0</span>).fun(<span class="number">1</span>); c.fun(<span class="number">2</span>); c.fun(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>我们先来一步一步地看。首先是<code>a=fun(0)</code>因为只传了一个参数，<code>console</code>输出的是第二个参数的值，所以毫无疑问地输出<code>undefined</code>。</p><p>然后到<code>a.fun(1)</code>可以看出，这句话是调用前面<code>fun(0)</code>返回回来的一个对象里面的函数<code>fun</code>，这个<code>fun</code>又把<code>fun(m,n)</code>返回出去。这个时候<strong>请注意</strong>：这个对象里的<code>fun</code>在返回之前调用了一下<code>fun(m,n)</code>，所以<code>console</code>又会被执行，可以确定，它肯定不会输出传进去的1，因为1作为第一个参数传到<code>fun(m,n)</code>里，而<code>console</code>是输出第二个参数的。那么这次会输出啥呢？</p><p>好了，不给大家卖关子了，答案是0。可能有人会问了，纳尼？为毛是0，0是哪来的？</p><p>要想看明白我的解释，前提是你得清楚闭包。这里用到了闭包。我们知道，闭包有个功能就是外部作用域能通过闭包访问函数内部的变量。其实在运行<code>a=fun(0)</code>的时候，<code>return</code>出来的对象里的函数<code>fun</code>把传进来的这个0作为第二个参数传到<code>fun</code>里面并返回出来这时0得到了保存。所以当运行<code>a.fun(1)</code>的时候其实输出的是之前的0。后面的那两个调用也和这个的原理一样，最后都是输出0。</p><p>这里可能会有点绕，需要花点时间来看或者自行去调试。（我已经在尽力表达清楚了，如果还不懂的话就留言吧=.=）。</p><p>然后到<code>b</code>，如果前面搞懂了这里就不难了。<code>fun(0)</code>运行的时候会<code>return</code>一个对象出去，后面的一串链式调用都是在调用前面函数返回的对象里的<code>fun</code>，最终导致输出是<code>undefined 0 1 2</code></p><p>最后到<code>c</code>，如果<code>b</code>都搞懂了，到这里基本就没什么难度了。分别会输出<code>undefined 0 1 1</code>。</p><p>如果还不懂的话建议单步调试一下，如果还是不懂可以在下面留言，我会尽最大能力给你解释。</p><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>用尽可能多的方法找出数组中重复出现过的元素<br>例如：[1，2，4，4，3，3，1，5，3]<br>输出：[1，3，4]</p><p>我的思路是，先创建一个数组。然后将传进来的数组进行排序。然后再利用<code>sort</code>方法遍历数组，因为它能一次取到两个数然后<code>a</code>和<code>b</code>比较如果相等而且<code>result</code>里面又没有重复的就把<code>a</code>推进去。</p><p>这是我的代码：</p><h2 id="4-5日更新"><a href="#4-5日更新" class="headerlink" title="4.5日更新"></a>4.5日更新</h2><p>感谢<a href="https://www.zhihu.com/people/jue-qiang-de-xiao-ping-gai/answers" target="_blank" rel="noopener">@倔强的小瓶盖</a>同学指出的问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    arr.sort().reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a === b &amp;&amp; result.indexOf(a) === <span class="number">-1</span>) &#123;</span><br><span class="line">            result.push(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//之前问题代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result=[];</span><br><span class="line">    arr.sort().sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a===b&amp;&amp;result.indexOf(a)===<span class="number">-1</span>)&#123;</span><br><span class="line">            result.push(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-23日更新"><a href="#3-23日更新" class="headerlink" title="3.23日更新"></a>3.23日更新</h2><p>感谢<a href="https://www.zhihu.com/people/start-wrap/answers" target="_blank" rel="noopener">@start-wrap</a>同学提供的方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = [], map = &#123;&#125;;</span><br><span class="line">arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(map[num] === <span class="number">1</span>) result.push(num);</span><br><span class="line">map[num] = (map[num] || <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;); </span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>值得一提的是<code>map[num] = (map[num] || 0) + 1</code>，这句代码的<code>(map[num] || 0)</code>如果<code>map[num]</code>存在，则<code>map[num]</code>+1反之则0+1，个人觉得用得很巧妙。</p><p>感谢<a href="https://www.zhihu.com/people/jerrywdlee/answers" target="_blank" rel="noopener">@早乙女瑞穂</a>提供的淫技巧：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array.filter(<span class="function">(<span class="params">x, i, self</span>) =&gt;</span> self.indexOf(x) !== i)));</span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>];</span><br><span class="line">array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x, i, self</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.indexOf(x) === i &amp;&amp; self.lastIndexOf(x) !== i </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>es6思路解说：</p><p>array.filter((x, i, self) =&gt; self.indexOf(x) !== i)<br>返回一个数组，该数组由arrary中重复的元素构成(返回N-1次)</p><p>new Set( [iterable] )<br>返回一个集合(重复元素在此被合并)</p><p>Array.from( [iterable] )<br>返回一个数组(将上一步的集合变为数组)</p><p>//es5思路解说：</p><p>使用<code>indexOf</code>和<code>lastIndexOf</code>正向判断和反向判断这个元素是不是同一个数(如果是同一个数，则两个方法返回的<code>i</code>是一样的)</p><h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><p>给定一些文档（docs）、词（words），找出词在文档中全部存在的所有文档</p><p>我的思路是：把第二个参数的数组用<code>join</code>合成一个字符串，然后用<code>forEach</code>遍历，分别把文档里的<code>words</code>也用<code>join</code>合成一个字符串，利用<code>search</code>方法找每个文档里的<code>words</code>是否包含有<code>arrStr</code>。</p><p>这是我的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findDocList</span>(<span class="params">docs, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arrStr = arr.join(<span class="string">""</span>),</span><br><span class="line">    itemStr,</span><br><span class="line">    result = [];</span><br><span class="line">    docs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        itemStr = item.words.join(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span>(itemStr.search(<span class="keyword">new</span> <span class="built_in">RegExp</span>(arrStr)) !== <span class="number">-1</span>) &#123;</span><br><span class="line">        result.push(<span class="string">"文档"</span> + item.id);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">findDocList(docs, [<span class="string">'hello'</span>]) <span class="comment">//文档1，文档2，文档3</span></span><br><span class="line">findDocList(docs, [<span class="string">'hello'</span>, <span class="string">'world'</span>]) <span class="comment">//文档1</span></span><br></pre></td></tr></table></figure></p><h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><p>下面代码会输出什么？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = (<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.a = a;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;(<span class="number">1</span>,<span class="number">2</span>)));</span><br><span class="line"><span class="built_in">console</span>.log(test(<span class="number">1</span>));</span><br></pre></td></tr></table></figure></p><p>可以看到，这里有两个自执行函数。下面这个自执行函数执行完后向上面这个自执行函数传了个1所以<code>this.a=1</code>，这里的<code>this</code>指向<code>window</code>。然后这个自执行函数返回个函数给<code>test</code>变量。下面调用<code>test(1)</code>，这个1传进来后相当于<code>return 1+1</code>所以就输出2。</p><h3 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h3><p>不用循环，创建一个长度为 100 的数组，并且每个元素的值等于它的下标。</p><p>如果了解<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" target="_blank" rel="noopener">Object.keys</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener">Array.form</a>的话，这题基本上没啥难度。<br>答案：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(<span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>:<span class="number">100</span>&#125;))</span><br></pre></td></tr></table></figure></p><p>哎！等下<code>Array.form</code>不是es6的吗，es5的怎么实现？<br>代码来了：</p><pre><code>Object.keys(Array.apply(null,{length:100}))</code></pre><p>如果还不懂可以参考<a href="https://www.zhihu.com/question/41493194" target="_blank" rel="noopener">这里</a>的讲解。</p><h3 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h3><p>一个整数，它的各位数字如果是左右对称的，则这个数字是对称数。那么请找出 1 至 10000 中所有的对称数</p><p>我的思路，先将数字转为字符串，然后利用数组的<code>map</code>方法遍历这个字符串，将字符串全部分开变为数组，然后调用数组的<code>reverse</code>方法，再将翻转后的数组<code>join</code>成字符串，最后对比翻转后的字符串和翻转前的字符串是否相等即可（方法有点愚笨，望大神指教）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">symmetric</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i=<span class="number">1</span>,</span><br><span class="line">    str,</span><br><span class="line">    newStr,</span><br><span class="line">    result=[];</span><br><span class="line">    <span class="keyword">for</span>(;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">        str=<span class="string">""</span>+i;</span><br><span class="line">        newStr=result.map.call(str,<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;).reverse().join(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span>(str===newStr)&#123;</span><br><span class="line">            result.push(+str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h3><p>以下代码输出什么？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">    foo: <span class="string">"bar"</span>,</span><br><span class="line">    func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'outer func : this.foo'</span> + <span class="keyword">this</span>.foo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'outer func : self.foo'</span> + self.foo);</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'inner func : this.foo'</span> + <span class="keyword">this</span>.foo);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'inner func : self.foo'</span> + self.foo);</span><br><span class="line">    &#125;)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">myObject.func();</span><br></pre></td></tr></table></figure></p><p>这题主要考察<code>this</code>指向，个人觉得难度不是太大，因为<code>this</code>已经被我完全承包啦(坏笑脸)。<br>这题的话只需考虑谁调用的函数<code>this</code>就指向谁。<br>函数开始执行<code>self=this</code>这里的<code>this</code>是指向<code>myObject</code>的，因为<code>myObject.func()</code>很明显是<code>myObject</code>在调用它嘛，所以头两句<code>console</code>输出的<code>foo</code>都是<code>bar</code>。<br>下面是一个自执行函数，要知道，自执行函数的<code>this</code>一般情况下都指向<code>window</code>这里也不例外，所以，第三个<code>console</code>输出的<code>foo</code>是<code>undefined</code>因为在<code>window</code>下<code>foo</code>没定义。第四个输出的是<code>self.foo</code>这个<code>self</code>就是上面定义的<code>self</code>即<code>myObject</code>所以，这里的<code>foo</code>为<code>bar</code>。</p><h3 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h3><p>请写出以下正则表达式的详细规则说明<br>/^(0[1-9]\d\d?)?[1-9]\d{6}\d?$/<br>/^(1[89]|[2-9]\d|100)$/i<br>/^[\w-]+@[a-z0-9-]+({[a-z]{2,6}}){1,2}$/i</p><p>嘿嘿，正则也算我比较拿手的部分。我来一个一个解释吧，有些正则比较难用语言表达，大家意会意会吧。</p><p>第一个：首先<code>^</code>代表的是以它后面的一堆东西为开头<code>$</code>代表以它前面一堆东西为结尾，在这里的意思就是以<code>(0[1-9]\d\d?)?[1-9]\d{6}\d?</code>为开头和结尾的字符串。然后到第一个括号里的意思是匹配第一个字符串为0第二个字符串为1-9第三个字符串为0-9第四个字符串可有可无，有的话匹配1-9，然后这整个括号里面的内容可有可无。问好后面的意思是匹配第一个字符串是1-9然后后面6个字符串匹配0-9最后一个字符串可有可无，有的话匹配0-9。</p><p>所以整理整理就是：匹配以0为第一个，1-9为第二个，数字为第三个；第四个可有可无，有的话匹配数字；然后前面这一整坨可有可无。1-9为第五个(如果前面那一坨没有的话，则从第一个算起)然后后面6个都是数字最后一个数字可有可无的字符串，且以它为开头和结尾。</p><p>下面是例子：<br>022222222222  //true<br>002222222222 //false 因为第二个数字是1-9<br>02222222222 //第一个括号最后一个数字<strong>或</strong>者最后面的数字省略<br>0222222222 //第一个括号最后一个数字<strong>和</strong>者最后面的数字省略<br>22222222  //第一个括号里的内容全部省略<br>02222222 //\d{6}没有满足。</p><p>第二个：匹配以1作为第一个，8或9作为第二个<strong>又或者</strong>以2-9为第一个，数字为第二个又或者匹配100的字符串，并以他们为开头和结尾，忽略大小写。</p><p>还是例子比较直观：</p><p>18 //true 匹配前面的1[89]<br>23 //true 匹配[2-9]\d<br>100 //true 匹配100<br>17 //false<br>230 //false</p><p>第三个：<br>匹配前面至少一个数字或字母或_或-再匹配@然后再匹配至少一个字母或数字或-然后到再匹配{字母2-6个}1-2个，的字符串，并以他们为开头和结尾忽略大小写。</p><p>这个用语言描述太难了，是我不会说话吗，上例子吧：</p><p>3@d{aw}{ad} //true<br>-@-{ddd}{fs} //true<br>3@3{dw}{ddd} //true<br>3@3{dw} //false {字母2-6个}少了一个即<code>({[a-z]{2,6}}){1,2}</code>后面的<code>{1,2}</code>没满足<br>@3{dw}{ddd} //false [\w-]+没满足<br>33{dw}{ddd} //false 没@<br>dsa@ffff{dw}{d} //false ({[a-z]{2,6}})不符合</p><h3 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h3><p>请写出打乱数组方法</p><h2 id="4-5日更新-1"><a href="#4-5日更新-1" class="headerlink" title="4.5日更新"></a>4.5日更新</h2><p><a href="https://www.h5jun.com/post/array-shuffle.html" target="_blank" rel="noopener">参考这里</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 之前的问题代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomsort</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random()&gt;<span class="number">.5</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//用Math.random()函数生成0~1之间的随机数与0.5比较，返回-1或1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.sort(randomsort);</span><br></pre></td></tr></table></figure><h3 id="第十题"><a href="#第十题" class="headerlink" title="第十题"></a>第十题</h3><p>写出element.getElementsByClassName 的实现方法<br>我的思路：先获取页面下的所有元素，然后用<code>split</code>将传进来的多个<code>class</code>分割成数组，然后利两层循环找出符合条件的元素（个人觉得这种方法效率实在低下，就当是抛砖引玉吧，欢迎留言）<br>代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">document</span>.getElementsByClassName) &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementsByClassName = <span class="function"><span class="keyword">function</span>(<span class="params">className</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ele = [],</span><br><span class="line">        tags = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"*"</span>);</span><br><span class="line">    className = className.split(<span class="regexp">/\s+/</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tags.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; className.length; j++) &#123;</span><br><span class="line">        <span class="comment">//如果这个元素上有这个class且没在ele里面(主要防止多个class加在一个元素上推进去两次的情况)</span></span><br><span class="line">            <span class="keyword">if</span>(tags[i].className === className[j] &amp;&amp; ele.indexOf(tags[i]) === <span class="number">-1</span>) &#123;</span><br><span class="line">                ele.push(tags[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ele;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="第十一题"><a href="#第十一题" class="headerlink" title="第十一题"></a>第十一题</h3><p>请写出代码输出结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!(<span class="string">"a"</span> <span class="keyword">in</span> <span class="built_in">window</span>))&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">alert(a);</span><br></pre></td></tr></table></figure></p><p>这题主要考察了变量的声明提升，任何变量(es5中)的声明都会提升到当前作用域的顶端。所以这里的代码其实为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="string">"a"</span> <span class="keyword">in</span> <span class="built_in">window</span>))&#123;</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">alert(a);</span><br></pre></td></tr></table></figure></p><p>所以，在if语句执行前<code>a</code>就已经在<code>window</code>中了，所以这里会<code>atert undefined</code></p><h3 id="第十二题"><a href="#第十二题" class="headerlink" title="第十二题"></a>第十二题</h3><p>请写出代码输出结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">var</span> tmp = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">        b = a + b;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">alert(handle(<span class="number">4</span>)(<span class="number">5</span>)(<span class="number">6</span>));</span><br></pre></td></tr></table></figure></p><p>我们来一步一步看：首先是<code>handle(4)</code>，到这里，程序开始运行，创建了一个<code>tmp</code>函数，同时把<code>tmp</code>函数的<code>toString</code>方法重写了，最后返回这个<code>tmp</code>函数。<br><strong>注意</strong>：<code>tmp</code>里的<code>a</code>不是传进去的4，不要把<code>tmp</code>的<code>a</code>和<code>handle</code>的<code>a</code>搞混了，所以这里传的4啥也没干。</p><p>然后到第二步：<code>handle(4)(5)</code>，这里就是执行了<code>tmp</code>函数，这个时候<code>tmp</code>函数的<code>a</code>就是传进来的5，·<code>b</code>就是第一步函数执行的<code>b</code>即3(不懂为何是3的同学再去了解了解闭包吧)，最后这个<code>b</code>就等于8。</p><p>第三部重复第二步<code>8+6</code>，最后<code>b</code>为14，<code>javascript</code>引擎最后自动调用了<code>toString</code>返回<code>b</code>，所以结果是14。</p><h3 id="第十三题"><a href="#第十三题" class="headerlink" title="第十三题"></a>第十三题</h3><p>javscript表达式”[]==’’”的值是什么，为什么？</p><p>这题考察对js<code>==</code>运算符的了解，我们知道<code>==</code>运算符如果两边值类型不一样会把它们转换为相同类型的值再来比较。这题左边是<code>object</code>类型，右边是<code>string</code>类型，所以会把左边的转化为<code>string</code>类型来比较，<code>[].toString()</code>就是<code>&#39;&#39;</code>所以最后结果是<code>true</code>。</p><h3 id="第十四题"><a href="#第十四题" class="headerlink" title="第十四题"></a>第十四题</h3><p>Js生成下面html，点击每个li的时候弹出1,2,3……<br>//li onclick事件都能弹出当前被点击的index=?<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"testUrl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>index=0<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>index=1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这题直接按照要求生成对应的html，再给<code>ul</code>绑定个事件，利用事件代理监听是谁被点了，然后输出它们的序号和对应的内容，没啥难度。我的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ul=<span class="built_in">document</span>.createElement(<span class="string">"ul"</span>),</span><br><span class="line">    lis=[];</span><br><span class="line">    ul.id=<span class="string">"testUrl"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,li;i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">    li=<span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">    li.innerHTML=<span class="string">"index="</span>+i;</span><br><span class="line">    ul.appendChild(li);</span><br><span class="line">    lis.push(li);</span><br><span class="line">&#125;</span><br><span class="line">ul.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    alert(lis.indexOf(e.target));</span><br><span class="line">    alert(e.target.innerHTML)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(ul);</span><br></pre></td></tr></table></figure></p><h3 id="第十五题"><a href="#第十五题" class="headerlink" title="第十五题"></a>第十五题</h3><p>map方法是ES5中新增的，要求为ES5以下的环境增加个map方法</p><p>个人认为只要对<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Compatibility" target="_blank" rel="noopener">map</a>方法够了解，自然就能封装出来了。嘿嘿，不喜勿喷。给的链接虽然也有一个实现<code>map</code>的方法，但是用到了es5的<code>for in</code>不符合题目，所以我的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">Array</span>.prototype.map)&#123;</span><br><span class="line">    <span class="built_in">Array</span>.prototype.map=<span class="function"><span class="keyword">function</span>(<span class="params">callback,context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len=<span class="keyword">this</span>.length,</span><br><span class="line">        i=<span class="number">0</span>,</span><br><span class="line">        result=[];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">"function"</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callback + <span class="string">" is not a function"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    context=context||<span class="built_in">window</span>;</span><br><span class="line">    <span class="keyword">for</span>(;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">this</span>[i]!==<span class="literal">undefined</span>?result.push(callback.call(context,<span class="keyword">this</span>[i],i,<span class="keyword">this</span>)):result.push(<span class="keyword">this</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不过我的代码和标准的输出结果还是有点出入的。就是我不处理<code>undefined</code>和<code>null</code>，因为<code>this[i]!==undefined</code>，这两个值是会原样返回的。不过日常的一些需求还是能满足的。欢迎大家提建议哈。</p><p>终于打完了，这期就这么多题，希望能对大家有帮助，同时如果有不对的地方请及时指正，欢迎留言。</p><p>另外，欢迎大家来围观我封装的一个<a href="https://github.com/JayZangwill/lightings">ajax库 lightings</a>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.jb51.net/article/87094.htm" target="_blank" rel="noopener">JS随机打乱数组的方法小结</a><br><a href="https://www.zhihu.com/question/41493194" target="_blank" rel="noopener">如何不使用loop循环，创建一个长度为100的数组，并且每个元素的值等于它的下标</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Compatibility" target="_blank" rel="noopener">MDN map</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://jayzangwill.github.io/blog/2017/03/19/Some%20of%20the%20interview%20questions%20that%20impressed%20me-2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&amp;amp;&amp;amp;&lt;a href=&quot;https://jayzangwill.github.io/blog/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的博客&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/25863288&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;知乎&lt;/a&gt;&amp;amp;&amp;amp;&lt;a href=&quot;https://zhuanlan.zhihu.com/jayzangwill&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;知乎专栏&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//www.jianshu.com/p/65319f42a5ce&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://henanjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;河南前端交流群官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上次写了一篇&lt;a href=&quot;https://jayzangwill.github.io/blog/2017/03/01/Some%20of%20the%20interview%20questions%20that%20impressed%20me-1/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;几个让我印象深刻的面试题(一)&lt;/a&gt;没看过的同学可以去看哦。&lt;br&gt;这次文章的题目来源：&lt;a href=&quot;https://juejin.im/post/58c51b5c44d90400698da686&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里有超过20家的前端面试题，你确定不点进来看看？&lt;/a&gt;。&lt;br&gt;如果上面的问题在我这篇文章里没有提到的话，那就说明有些问题可以很容易查得到或者很简单或者我能力有限不能解答出来的。如果有的问题你不会而且我又没有提的那就认为就是我能力有限不能解答出来吧。嘿嘿嘿。开个玩笑，不过可以在下面留言哦！&lt;/p&gt;
    
    </summary>
    
    
      <category term="基础" scheme="https://github.com/JayZangwill/blog/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="javascript" scheme="https://github.com/JayZangwill/blog/tags/javascript/"/>
    
      <category term="面试" scheme="https://github.com/JayZangwill/blog/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>几个让我印象深刻的面试题(一)</title>
    <link href="https://github.com/JayZangwill/blog/2017/03/01/Some%20of%20the%20interview%20questions%20that%20impressed%20me-1/"/>
    <id>https://github.com/JayZangwill/blog/2017/03/01/Some of the interview questions that impressed me-1/</id>
    <published>2017-03-01T08:35:41.000Z</published>
    <updated>2018-03-19T13:55:03.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://jayzangwill.github.io/blog/2017/03/01/Some%20of%20the%20interview%20questions%20that%20impressed%20me/" target="_blank" rel="noopener">原文地址</a>&amp;&amp;<a href="https://jayzangwill.github.io/blog/" target="_blank" rel="noopener">我的博客</a><br><a href="https://zhuanlan.zhihu.com/p/25514220" target="_blank" rel="noopener">知乎</a>&amp;&amp;<a href="https://zhuanlan.zhihu.com/jayzangwill" target="_blank" rel="noopener">知乎专栏</a><br><a href="http://henanjs.org/" target="_blank" rel="noopener">河南前端交流群官网</a></p><p>时间不知不觉已经来到了大三的下学期，各大企业的春招也陆续的开始，自己也开始做些面试题，一来了解了解面试题一般会问什么，二来通过面试题可以发现自己还有哪方面不足赶紧弥补，以备战今年的春招。<br>通过最近的学习，我总结了一下一些我遇到的让我印象深刻的一些面试题，大家可以先看看题目自己想想答案，然后再看我的答案(<strong>我的答案经供参考，如有更好的想法欢迎在下面评论区提出自己的意见</strong>)。</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><ol><li>给一个div设置它的宽度为<code>100px</code>，然后再设置它的<code>padding-top</code>为<code>20%</code>。问：现在这个div有多高？</li><li>如下代码：</li></ol><pre><code>function fn1(){    for(var i=0;i&lt;4;i++){        var tc=setTimeout(function(i){            console.log(i);            clearTimeout(tc)        },10,i);    }}function fn2(){    for(var i=0;i&lt;4;i++){        var tc=setInterval(function(i,tc){            console.log(i);            clearInterval(tc)        },10,i,tc);    }}fn1();fn2();</code></pre><p>请问分别会输出什么？</p><ol><li>如下代码：</li></ol><pre><code>var fn=function(a,b,c){    return a+b+c;}</code></pre><p>需要写一个函数，满足<code>curry(fn)(1)(2)(3) //6</code></p><ol><li>使用原生JS实现：<code>(10).add(10).reduce(2).add(10) //28</code>，意思是10加上10减去2加上10等于28。</li></ol><p>你可以自己思考答案后在参考我给的参考答案。</p><h2 id="答案揭晓"><a href="#答案揭晓" class="headerlink" title="答案揭晓"></a>答案揭晓</h2><h3 id="第一个问题"><a href="#第一个问题" class="headerlink" title="第一个问题"></a>第一个问题</h3><p>这题主要考察了对<strong>w3c</strong>标准的了解。如果你亲自去浏览器去试的话会发现这个<code>div</code>的高为：<code>316.8</code>(<strong>注意</strong>：不同分辨率的电脑测试会有不同的效果，这里以我的电脑1600x900为参考)，其实到这里这题已经是解开了，但是可能还有些同学没明白这个<code>316.8</code>是如何计算得来的。别急，请听我细细道来。<br><img src="/blog/img/face/padding-top.png" alt="div的高"><br>如果你搞不懂结果为何是这个的话可能会去查<a href="http://www.w3school.com.cn/cssref/pr_padding.asp" target="_blank" rel="noopener">w3school</a>，你可能会看到：<br><img src="/blog/img/face/w3c.png" alt="w3school上的介绍"><br>但是可以这么说上面的所说的是错的，或者说，表述不准确。<br>例如一下情况：</p><pre><code>//css.inner{        position: absolute;        width: 100px;        padding-top: 20%;}.mid{    width: 200px;}.wrap{    position: relative;    width: 300px;}//html&lt;div class=&quot;wrap&quot;&gt;    &lt;div class=&quot;mid&quot;&gt;        &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;</code></pre><p><img src="/blog/img/face/absolute-padding.png" alt="加了定位后div的高"><br>如果按照<a href="http://www.w3school.com.cn/cssref/pr_padding.asp" target="_blank" rel="noopener">w3school</a>说的，这个<code>inner</code>的高应该是<code>40px</code>，但是实际不是，而是<code>60px</code>，是以<code>wrap</code>的宽度计算的，由此可见，w3school的说法不成立。<br>那么，当<code>padding</code>设置为<code>%</code>时到底以谁为参考呢？<br>事到如今我也不给大家卖关子了，其实是以<a href="http://www.ayqy.net/doc/css2-1/visudet.html#containing-block-details" target="_blank" rel="noopener">包含块</a>为参考的。通俗点来说就是谁包含它，它就以谁为参考，在这里<code>inner</code>设置了<code>position:absolute</code>脱离了原来的文档流，就会去寻找它的祖先元素设置了<code>position:relative</code>的元素作为它的包含块。如果还不懂包含块是啥的同学建议仔细阅读我刚刚给的链接，同时还可以参考我在<a href="https://segmentfault.com/q/1010000008362925" target="_blank" rel="noopener">segmentfault</a>上的这个问题。</p><h3 id="第二个问题"><a href="#第二个问题" class="headerlink" title="第二个问题"></a>第二个问题</h3><p>这题考察了对闭包和定时器另外还有js执行顺序的理解。<br>先来说说<code>fn1</code>，如果把<code>clearTimeout</code>去掉，相信大家一定很熟悉，都会说<code>10ms</code>延迟后会依次输出<code>0,1,2,3</code>。<br>但是，请注意这里加了个<code>clearTimeout</code>，如果你去控制台实验的话会发现只输出了<code>0,1,2</code>，那<code>3</code>呢？<br>先别急，请听我慢慢道来：<br><strong>请注意：</strong>这个<code>tc</code>是定义在闭包外面的，也就是说<code>tc</code>并没有被闭包保存，所以这里的<code>tc</code>指的是最后一个循环留下来的<code>tc</code>，所以最后一个<code>3</code>被清除了，没有输出。</p><p>再来看看<code>fn2</code>，可以发现区别就是把<code>setTimeout</code>改为了<code>setInterval</code>,同时把定时器也传到了闭包里。<br>那么结果又会有什么不同呢？如果亲自去实验的同学就会发现输出<code>0,1,2,3,3,3...</code>。<br>什么鬼？为毛最后一个定时器没被删除。说实话，我在这里也想了很久，为何最后一个定时器没被删除。后来我为了调试方便把<code>i&lt;4</code>改为了<code>i&lt;2</code>并把触发时间改为3s，在浏览器中单步调试，发现3s后第一次触发回调函数执行的时候<code>tc</code>的值是<code>undefined</code>第二次触发的时候有值了。这个时候我顿悟，这和程序的执行顺序有关。我们知道js正常情况下是从上到下，从右到左执行的。<br>所以这里每次循环先设置定时器，然后把定时器的返回值赋值给<code>tc</code>。在第一次循环的时候<code>tc</code>并没有被赋值，所以是<code>undefined</code>，在第二次循环的时候，定时器其实清理的是上一个循环的定时器。所以导致每次循环都是清理上一次的定时器，而最后一次循环的定时器没被清理，导致一直输出<code>3</code>。</p><h3 id="第三个问题"><a href="#第三个问题" class="headerlink" title="第三个问题"></a>第三个问题</h3><p>这题很明显，考察函数的柯里化，函数的柯里化还不懂是啥的童鞋可以看<a href="http://www.zhangxinxu.com/wordpress/2013/02/js-currying/" target="_blank" rel="noopener">这里</a>。<br>这题我的解题思路可能会有点愚笨，不过为了抛砖引玉，还是硬着头皮把我的方法写上来吧，欢迎大家在下面评论给意见。<br>按照题目的要求需要把<code>fn</code>作为第一个参数传进去，而且给出结果刚好是<code>fn</code>运算后给出的结果。<br>所以我的思路是要有一个函数将<code>fn</code>函数所需参数全部集中到一个数组上，集中完毕后调用<code>fn</code>函数，我的代码如下：</p><pre><code>var fn = function(a,b,c) {    return a+b+c;}function curry(fn) {    var arr = [],    mySlice = arr.slice    fnLen = fn.length;    function curring() {        arr = arr.concat(mySlice.call(arguments));        if(arr.length &lt; fnLen) {            return curring;        }        return fn.apply(this, arr);    }    return curring}curry(fn)(1)(2)(3);//6</code></pre><h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><p>这题主要考察对函数原型的理解。<br>相信大多数同学看到题目可能会一脸懵逼。<code>(10)</code>是什么鬼？函数调用？如果是函数调用你的函数名咧？<br>但是如果你多看两眼<code>(10)</code>不就是普通的<code>10</code>嘛，就是这个<code>10</code>在调用它原型下的<code>add</code>函数，然后后面一串链式调用你懂的！<br>如果搞清楚这点的话这题就简单了，直接在<code>Number</code>的原型下加方法：</p><pre><code>Number.prototype.add=function(num){    return this+num;}Number.prototype.reduce=function(num){    return this-num;}</code></pre><p>就是这么简单。</p><h2 id="说在最后的话"><a href="#说在最后的话" class="headerlink" title="说在最后的话"></a>说在最后的话</h2><p>祝各位和我一样奋斗在春招一线的同学早日拿到心怡的offer，另外，我的博客还会持续更新关于面试题的一些技术文章，欢迎大家关注。<br><a href="http://www.jayzangwill.cn/resume.html" target="_blank" rel="noopener">我的简历</a>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/q/1010000008362925" target="_blank" rel="noopener">一个面试题衍生出来的问题推荐答案</a><br><a href="http://www.zhangxinxu.com/wordpress/2013/02/js-currying/" target="_blank" rel="noopener">JS中的柯里化</a><br><a href="https://www.zhihu.com/question/54822257" target="_blank" rel="noopener">Web前端面试题，求解答</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://jayzangwill.github.io/blog/2017/03/01/Some%20of%20the%20interview%20questions%20that%20impressed%20me/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&amp;amp;&amp;amp;&lt;a href=&quot;https://jayzangwill.github.io/blog/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的博客&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/25514220&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;知乎&lt;/a&gt;&amp;amp;&amp;amp;&lt;a href=&quot;https://zhuanlan.zhihu.com/jayzangwill&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;知乎专栏&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://henanjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;河南前端交流群官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;时间不知不觉已经来到了大三的下学期，各大企业的春招也陆续的开始，自己也开始做些面试题，一来了解了解面试题一般会问什么，二来通过面试题可以发现自己还有哪方面不足赶紧弥补，以备战今年的春招。&lt;br&gt;通过最近的学习，我总结了一下一些我遇到的让我印象深刻的一些面试题，大家可以先看看题目自己想想答案，然后再看我的答案(&lt;strong&gt;我的答案经供参考，如有更好的想法欢迎在下面评论区提出自己的意见&lt;/strong&gt;)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="基础" scheme="https://github.com/JayZangwill/blog/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="javascript" scheme="https://github.com/JayZangwill/blog/tags/javascript/"/>
    
      <category term="面试" scheme="https://github.com/JayZangwill/blog/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>css盒模型与定位</title>
    <link href="https://github.com/JayZangwill/blog/2016/12/15/CSS%20box%20model%20and%20location/"/>
    <id>https://github.com/JayZangwill/blog/2016/12/15/CSS box model and location/</id>
    <published>2016-12-15T08:25:28.000Z</published>
    <updated>2018-03-19T13:55:03.427Z</updated>
    
    <content type="html"><![CDATA[<p>说到css的盒子模型和定位相信大家一定都听说过，因为它们是css中的基础，同时也是难点，这篇文章的作用在于基础知识的扫盲。</p><a id="more"></a><p>先来说说盒子模型吧</p><h1 id="什么是盒子模型"><a href="#什么是盒子模型" class="headerlink" title="什么是盒子模型"></a>什么是盒子模型</h1><p>简单地说每个html标签都是一个方块，然后这个方块又包着几个小方块。分别是：margin、border、padding、content。它们的关系是margin包着border包着padding包着content。就像盒子一层一层地包着一样，这就是我们所说的盒模型。<br>嗯，看上面的文字有点文绉绉的，我们直接上图吧。<br>打开谷歌浏览器，按下F12，然后把右边栏的滚动条拉到最下面你就会看到一个东西：</p><p><img src="/blog/img/box/box-model.png" alt="盒模型"></p><p>这就很直观给我们展示了什么是盒子模型！</p><h1 id="盒子有多大"><a href="#盒子有多大" class="headerlink" title="盒子有多大"></a>盒子有多大</h1><p>我相信这个问题肯定会问倒很多人，这个问题是个非常经典的问题。我在百度上查都能查到有很多人写的博客上都在这方面有错误，所以，我觉得我有必要在这篇文章上讲清楚盒子到底有多大。<br>老规矩，先上代码</p><pre><code>.red{    width:200px;    height:200px;    background-color:red;}</code></pre><p>补全html代码就会在页面左上角出现这么个玩意儿：</p><p><img src="/blog/img/box/width.png" alt="红色方块"></p><p>对应的盒子模型：</p><p><img src="/blog/img/box/width-box.png" alt="红色方块的盒子模型"></p><p>很明显这个时候的盒子大小就是content的大小。来，我们继续往下走，我们给这个方块加上padding：</p><pre><code>.red{    width:200px;    height:200px;    padding:10px;    background-color:red;}</code></pre><p>这时你就会发现这个方块比原来稍微胖了那么一点：</p><p><img src="/blog/img/box/padding.png" alt="加上padding的红色方块"></p><p>对应的盒模型：</p><p><img src="/blog/img/box/padding-box.png" alt="加上padding的红色方块的盒子模型"></p><p>这个时候将鼠标移到控制台上的这个元素你就会发现：</p><p><img src="/blog/img/box/padding-width.png" alt="加上padding的红色方块的长宽"></p><p>下面写有盒子的长宽变成了<code>220x220</code>，很明显，padding是能够改变盒子的大小的，这时盒子大小就等于content+padding。</p><p>接下来，我们给盒子加上边框：</p><pre><code>.red{    width:200px;    height:200px;    padding:10px;    border:10px solid black;    background-color:red;}</code></pre><p>这个时候变成了下面这样：</p><p><img src="/blog/img/box/border.png" alt="加上border的红色方块"></p><p>盒模型：</p><p><img src="/blog/img/box/border-box.png" alt="加上border的红色方块的盒模型"></p><p>它的长宽：</p><p><img src="/blog/img/box/border-width.png" alt="加上border的红色方块的长宽"></p><p>可以发现长宽变为了<code>240x240</code>，所以这时盒子大小就等于content+padding+border。</p><p>接下来讲margin。在给这个方块加margin之前为了方便观察我们加个类名为blue的div，并且加上样式：</p><pre><code>.blue{    width:100px;    height:100px;    background-color:blue;}</code></pre><p>效果图：</p><p><img src="/blog/img/box/blue.png" alt="加个蓝色方块"></p><p>因为div是块级元素，所以新加的蓝色div自动跑到红色的下面。<br>接下来给红色方块加上margin-bottom：</p><pre><code>.red{    width:200px;    height:200px;    padding:10px;    margin-bottom:10px;    border:10px solid black;    background-color:red;}</code></pre><p>效果图：</p><p><img src="/blog/img/box/margin.png" alt="加上margin"></p><p>可以发现，盒子的底部产生了10px的空白。</p><p>对应的盒模型</p><p><img src="/blog/img/box/margin-box.png" alt="加上margin的红色方块的盒模型"></p><p>方块的长宽</p><p><img src="/blog/img/box/margin-width.png" alt="加上margin的红色方块的长宽"></p><p>很明显盒子的大小并没有变大，还是原来的<code>240x240</code>。</p><p>所以，最终盒子的大小为content+padding+border即内容的(width)+内边距的再加上边框，而不加上margin。</p><p>看到网上很多文章都把margin算进去了，如果按照他们所说的，上面盒子的大小应该是<code>240x250</code>，然而实际情况并不是。从这里可以看出，很多人对盒模型有误解。<strong>把margin算进去的那是盒子占据的位置，而不是盒子的大小！</strong></p><p>其实盒模型一共分为两种，一种是上面讲的标准盒模型，还有一种是怪异盒模型，这两种盒模型的区别在于width/height。前者width/height指的是content区域的宽度和高度，后者width/height指的是content+padding+border。</p><p>在ie8+浏览器中使用哪个盒模型可以由<code>box-sizing</code>控制，默认值为<code>content-box</code>，即标准盒模型；如果将<code>box-sizing</code>设为<code>border-box</code>则用的是怪异盒模型。如果在ie6,7,8中DOCTYPE缺失会触发怪异模式。</p><p>我们可以把上面的红色方块的<code>box-sizing</code>设为<code>border-box</code>发现，无论我们怎么改border和padding盒子大小始终是定义的width和height：</p><p><img src="/blog/img/box/box-sizing.png" alt="box-sizing"></p><h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><p>定位<code>(position)</code>有四个值：</p><ol><li>static</li><li>relative</li><li>absolute</li><li>fixed</li></ol><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>一般如果我们不设置<code>position</code>的话它的默认值就是<code>static</code>，这个时候left、top、bottom、right是不起作用的<br>，现在有如下两个div，他们的关系是兄弟关系：</p><pre><code>.red{    width:200px;    height:200px;    left:100px;    top:100px;    background-color:red;}.blue{    width:100px;    height:100px;    background-color:blue;}</code></pre><p>效果图：</p><p><img src="/blog/img/box/static.png" alt="static"></p><p>可以发现，并没有什么变化。红色方块的<code>left</code>和<code>top</code>加不加都一样。</p><h2 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h2><p>但是，现在我们给红色方块加个<code>position:relative</code>：</p><pre><code>.red{    position:relative;    width:200px;    height:200px;    left:100px;    top:100px;    background-color:red;}</code></pre><p>嘿嘿，变这样了：</p><p><img src="/blog/img/box/relative.png" alt="relative"></p><p>可以发现，红色方块跑到蓝色方块的右边了，左边缘和顶边缘都距离原来100px，但是蓝色方块还是在原来的地方不动，现在可以得出一个结论：<strong>使用相对定位给元素加left/top/right/buttom元素会以原来的位置为基础加上这些值，即以原来的位置为基础定位，并且没有脱离文档流</strong></p><p>嗯，是不是看起来有点文绉绉的，那来个形象的比喻吧：</p><p>假如<code>position:static</code>是一个活人的话，并且拥有灵魂，这个时候我想给他加个<code>left:100px</code>想让他的灵魂出来，但是并没有效果。当这个人刚去世而且尸体还没火化的时候(相当于<code>position:relative</code>)，这时我加个<code>left:100px</code>灵魂就可以移动了，并且灵魂往尸体的右边移动了100px。因为尸体还没火化，所以这个人还是占一定的空间的。</p><h2 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h2><p>现在，我们把<code>position</code>改为<code>absolute</code>：</p><pre><code>.red{    position:absolute;    width:200px;    height:200px;    left:100px;    top:100px;    background-color:red;}</code></pre><p>效果图：</p><p><img src="/blog/img/box/absolute1.png" alt="absolute"></p><p>可以发现蓝色方块如我们所愿移动到了红色方块的上面，说明红色方块已经脱离文档流。虽然红色方块的位移和<code>relative</code>一样但是，红色方块位移的参考不再是原来的位置而是body只不过红色方块的位置刚好在body的最左上角，刚好碰巧位移一样，上面的这个例子可能看不出来，让我们来改改代码。</p><p>首先将html结构改成：</p><pre><code>&lt;div class=&quot;red&quot;&gt;    &lt;div class=&quot;blue&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><p>然后红色方块的<code>absolute</code>改回<code>relative</code></p><p>效果图：</p><p><img src="/blog/img/box/absolute2.png" alt="absolute"></p><p>然后蓝色方块代码改为：</p><pre><code>.blue{    position:absolute;    top:100px;    left:100px;    width:100px;    height:100px;    background-color:blue;}</code></pre><p><img src="/blog/img/box/absolute3.png" alt="absolute"></p><p>可以发现在给蓝色方块添加<code>position:absolute</code>前，蓝色方块像我们想的那样在红色方块的左上角；当我们给蓝色方块添加<code>position:absolute</code>并且添加<code>left</code>和<code>top</code>时，蓝色方块就跑到了红色方块的右下角。</p><p>那么这次这个蓝色方块是以谁为参考进行位移的？刚刚你说的以body为参考又是什么情况？</p><p>好，我这里就给大家说清楚，当给一个元素设置<code>position:absolute</code>时，这个元素的位置就是以他父代元素<code>position</code>不为<code>static</code>的元素作为参考，如果他的父代元素都是<code>position:static</code>那就以body作为参考。刚刚红色方块的情况就是他父代元素没有<code>position</code>不为<code>static</code>的元素，所以只能以body作为参考。</p><p>嗯，讲的文绉绉的，我不喜欢。来，举个例子：</p><p>还是刚刚那个人与灵魂的例子，当设置<code>position:absolute</code>时，就相当于人死了，尸体已经火化了，只剩下灵魂和骨灰，所以是不占空间的(就是已经脱离文档流)。这个时候灵魂可以乱飘了，但是有个限制，只能相对于骨灰飘。</p><h2 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h2><p>现在让我们再来创建一个绿色方块：</p><pre><code>.green{    position:fixed;    top:150px;    left:150px;    width:100px;    height:100px;    background-color:green;}</code></pre><p>效果图：</p><p><img src="/blog/img/box/fixed.png" alt="fixed"></p><p>这个看起来貌似没有什么特别的，现在我们来给body加个<code>height:2000px</code>(这个高度随意，但是要使浏览器右边出现滚动条)，然后把浏览器的滚动条往下拉，一个神奇的事情发生了：绿色方块固定在我们定义的位置上屏幕上不动了！</p><p><img src="/blog/img/box/scroll.png" alt="scroll"></p><p>这个fixed我们见得最多的就是网页中顽固的小广告，不管我们怎么拖拽滚动条，它总是固定在那，就是一个升级版的<code>absolute</code>。</p><p>用上面的例子来说就是人已经成仙了，可以不受限制地乱飘，而且不管你怎么拉，都拉不动他，他就在那不动了！</p><h2 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h2><p>说到定位，肯定少不了z-index。用上面的例子来说z-index就是灵魂飘的高度，设置得越大，自然就飘得越高，既然扯到了灵魂，z-index肯定是对活人(<code>static</code>)无效的了。</p><p>正常情况下(没有加z-index)，元素是按照后来居上原则进行堆叠。在这个例子上的html元素是这样的：</p><pre><code>&lt;div class=&quot;red&quot;&gt;        &lt;div class=&quot;blue&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;div class=&quot;green&quot;&gt;&lt;/div&gt;</code></pre><p>按照后来居上原则，红色方块最先被浏览器渲染到，所以在最下面，其次到蓝色，最后到绿色。</p><p>如果我们想让红色方块显示到前面我们可以给它加个<code>z-index:1</code>，结果：</p><p><img src="/blog/img/box/z-index1.png" alt="z-index"></p><p>发现绿色方块“消失了”。其实绿色方块并没有消失，你可以将滚动条往下拉，或者看盒子模型：</p><p><img src="/blog/img/box/z-index-box.png" alt="z-index"></p><p>可以发现它并没有消失，只是被盖在了红色方块下面。由于红色方块与蓝色方块是父子关系，红色的上来了，蓝色肯定的上来啊。</p><p>现在我有个想法，想让蓝色方块弄到红色方块下面该怎么办？很多人可能会想到简单啊，直接给蓝色方块加个<code>z-index:-1</code>不就得了吗？但是很可惜，没用。</p><p>要解释这个现象就得扯到<strong>层叠上下文</strong>的东西了。解释这东西又得花些篇幅来讲，具体的可以看<a href="http://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/" target="_blank" rel="noopener">这里</a>。</p><p>这里我就一笔带过了，用最通俗易懂的例子来解释了，老爸的灵魂包着儿子的灵魂飘到了一楼(z-index:1)，但是儿子想下到-1楼(z-index:-1)这是不行的因为儿子的灵魂已经被老爸的灵魂包着了(当z-index为数值时，会产生层叠上下文)，如果儿子想下到一楼，得先不让老爸的灵魂包着儿子的灵魂(不设置红色方块的z-index或者设置为z-index:auto)，这样就能下到-1楼了这样蓝色方块就被红色方块挡住了。</p><p>但是不设置红色的<code>z-index</code>的话，绿色方块又出来作怪了，这个时候只能设置绿色方块<code>z-index:-1</code>，红色方块就没谁能挡得住了！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>css的盒模型由content(内容)、padding(内边距)、border(边框)、margin(外边距)组成。</li><li>在w3c和模型中，设置的width/height是content的宽度/高度，在怪异模式中width/height设置的是content+padding+border宽度/高度。</li><li>在w3c盒子模型中盒子的大小由content、padding、border决定，在在怪异模式中盒子大小由width和height决定。</li><li>定位有四个值static(静止)、relative(相对)、absolute(绝对)、fixed(固定)。</li><li>left、top、right、bottom、z-index不能对static起作用。</li></ol><p>有什么问题可以在下面留言哦，会及时给出答复的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说到css的盒子模型和定位相信大家一定都听说过，因为它们是css中的基础，同时也是难点，这篇文章的作用在于基础知识的扫盲。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="https://github.com/JayZangwill/blog/tags/css/"/>
    
      <category term="基础" scheme="https://github.com/JayZangwill/blog/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="盒模型" scheme="https://github.com/JayZangwill/blog/tags/%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="定位" scheme="https://github.com/JayZangwill/blog/tags/%E5%AE%9A%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>javscript的数据类型</title>
    <link href="https://github.com/JayZangwill/blog/2016/11/07/Javscript%20data%20type/"/>
    <id>https://github.com/JayZangwill/blog/2016/11/07/Javscript data type/</id>
    <published>2016-11-07T01:24:10.000Z</published>
    <updated>2018-03-19T13:55:03.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javscript数据类型"><a href="#javscript数据类型" class="headerlink" title="javscript数据类型"></a>javscript数据类型</h1><p>之前学到javascript的数据类型时遇到了一些困惑，因为之前和一些大神交流和自己百度+谷歌查到的还有在红宝书上看到的答案不一样，最近通过查阅了一些资料终于把自己的困惑解决了，现在来写一些笔记记录记录。</p><a id="more"></a><p>之前和一些大神交流了一下javascript的数据类型的问题，这些大神大多数都把js的数据类型分为：</p><ul><li><p>number</p></li><li><p>string</p></li><li><p>undefined</p></li><li><p>function</p></li><li><p>boolean</p></li><li><p>object</p></li></ul><p>当时我就把javascript的数据类型分为这几种了，但是后来我又在网上发现有其他的一种分类：</p><ul><li><p>number</p></li><li><p>string</p></li><li><p>undefined</p></li><li><p>null</p></li><li><p>boolean</p></li><li><p>symbol (es6新增)</p></li><li><p>object</p></li></ul><p>可以发现，这两种分类的分歧在<code>function</code>和<code>null</code>上。</p><p>可以判断：前者是根据<code>typeof</code>返回的值来分数据类型的，根据我所查到的<a href="https://www.zhihu.com/question/24804474" target="_blank" rel="noopener">资料</a>说根据<code>typeof</code>来定义数据类型是不正确的，因为它只是一个运算符，它的返回值不能作为数据类型的依据。</p><p><a href="https://www.zhihu.com/question/24804474" target="_blank" rel="noopener">资料</a>上面还说了<code>typeof null</code>返回的<code>object</code>是个历史性的错误，按理来说应该返回<code>null</code> </p><p><strong>注意：</strong>在javascript中</p><pre><code>console.log(null==undefined) //trueconsole.lof(null===undefined) //false</code></pre><p>在<a href="http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-data-types-and-values" target="_blank" rel="noopener">ECMASscript标准中</a>也很详细地说了数据类型和它们的值，发现都是以第二种分类为准。</p><p>至于新加的符号类型可以<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="noopener">戳这里</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javscript数据类型&quot;&gt;&lt;a href=&quot;#javscript数据类型&quot; class=&quot;headerlink&quot; title=&quot;javscript数据类型&quot;&gt;&lt;/a&gt;javscript数据类型&lt;/h1&gt;&lt;p&gt;之前学到javascript的数据类型时遇到了一些困惑，因为之前和一些大神交流和自己百度+谷歌查到的还有在红宝书上看到的答案不一样，最近通过查阅了一些资料终于把自己的困惑解决了，现在来写一些笔记记录记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="基础" scheme="https://github.com/JayZangwill/blog/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="javascript" scheme="https://github.com/JayZangwill/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>angular学习笔记(3)</title>
    <link href="https://github.com/JayZangwill/blog/2016/10/24/angular%20Study%20notes-3/"/>
    <id>https://github.com/JayZangwill/blog/2016/10/24/angular Study notes-3/</id>
    <published>2016-10-24T01:51:09.000Z</published>
    <updated>2018-03-19T13:55:03.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="angular表单验证"><a href="#angular表单验证" class="headerlink" title="angular表单验证"></a>angular表单验证</h1><p>angular自带有一套功能强大的表单验证功能，另外还拓展了一些验证功能(number，url，email，reset)，还能给我们自定义验证方法，用起来特别方便。</p><p>首先，先得把bootstrap的样式引进来，这样就不用自己写样式了。</p><a id="more"></a><h2 id="用户名的验证"><a href="#用户名的验证" class="headerlink" title="用户名的验证"></a>用户名的验证</h2><p>直接上代码：</p><pre><code>&lt;div class=&quot;form-group&quot; ng-class=&quot;{&apos;has-error&apos;:form.name.$dirty&amp;&amp;form.name.$invalid}&quot;&gt;            &lt;label class=&quot;control-label&quot;&gt;用户名&lt;/label&gt;            &lt;input autocomplete=&quot;off&quot; ng-pattern=&quot;/^[a-z]/i&quot; name=&quot;name&quot; type=&quot;name&quot; ng-model=&quot;name&quot; ng-required=&quot;true&quot; ng-minlength=&quot;5&quot; ng-maxlength=&quot;10&quot; class=&quot;form-control&quot; placeholder=&quot;邮箱&quot;&gt;            &lt;div ng-show=&quot;form.name.$dirty&amp;&amp;form.name.$error.minlength&quot; class=&quot;alert alert-danger help-block&quot;&gt;                至少5位            &lt;/div&gt;            &lt;div ng-show=&quot;form.name.$dirty&amp;&amp;form.name.$error.maxlength&quot; class=&quot;alert alert-danger help-block&quot;&gt;                最多10位            &lt;/div&gt;            &lt;div ng-show=&quot;form.name.$dirty&amp;&amp;form.name.$error.pattern&quot; class=&quot;alert alert-danger help-block&quot;&gt;                以字母开头            &lt;/div&gt;        &lt;/div&gt;</code></pre><p>从上往下看，可以先看到<code>ng-class</code>里面有个逻辑表达式，如果<code>has-error</code>后面的表达式成立就会用这个class。第一个表达式是<code>name</code>值为<code>form</code>的表单里的<code>name</code>值为<code>name</code>的输入框有改动返回的值就为真。第二个是这个输入框有不合法的话返回的值为真。</p><p><code>ng-pattern</code>是指用正则验证，如果匹配则下面的<code>form.name.$error.pattern</code>就会返回<code>true</code></p><h2 id="密码和密码确认"><a href="#密码和密码确认" class="headerlink" title="密码和密码确认"></a>密码和密码确认</h2><pre><code>&lt;div class=&quot;form-group&quot; ng-class=&quot;{&apos;has-error&apos;:form.password.$dirty&amp;&amp;form.password.$invalid}&quot;&gt;            &lt;label class=&quot;control-label&quot;&gt;密码&lt;/label&gt;            &lt;input autocomplete=&quot;off&quot; name=&quot;password&quot; type=&quot;password&quot; ng-model=&quot;password&quot; ng-required=&quot;true&quot; ng-minlength=&quot;5&quot; ng-maxlength=&quot;10&quot; class=&quot;form-control&quot; placeholder=&quot;密码&quot;&gt;            &lt;div ng-show=&quot;form.password.$dirty&amp;&amp;form.password.$error.minlength&quot; class=&quot;alert alert-danger help-block&quot;&gt;                至少5位            &lt;/div&gt;            &lt;div ng-show=&quot;form.password.$dirty&amp;&amp;form.password.$error.maxlength&quot; class=&quot;alert alert-danger help-block&quot;&gt;                最多10位            &lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;form-group&quot; ng-class=&quot;{&apos;has-error&apos;:form.passwordConfirm.$dirty&amp;&amp;form.passwordConfirm.$dirty&amp;&amp;form.passwordConfirm.$invalid}&quot;&gt;            &lt;label class=&quot;control-label&quot;&gt;确认密码&lt;/label&gt;            &lt;input autocomplete=&quot;off&quot; name=&quot;passwordConfirm&quot; type=&quot;password&quot; ng-model=&quot;passwordConfirm&quot; ng-required=&quot;true&quot; class=&quot;form-control&quot; placeholder=&quot;密码&quot;&gt;            &lt;div ng-show=&quot;form.password.$dirty&amp;&amp;form.passwordConfirm.$dirty&amp;&amp;passwordConfirm!==password&quot; class=&quot;alert alert-danger help-block&quot;&gt;                两次不一样            &lt;/div&gt;        &lt;/div&gt;</code></pre><p>密码的验证基本没什么特别的，最大长度和最小长度一眼能看出来什么意思。密码的确认那里，如果两个<code>ng-model</code>(指的是密码和确认密码的<code>ng-model</code>)不相等就返回<code>false</code>。</p><h2 id="邮箱验证"><a href="#邮箱验证" class="headerlink" title="邮箱验证"></a>邮箱验证</h2><pre><code>&lt;div class=&quot;form-group&quot; ng-class=&quot;{&apos;has-error&apos;:form.email.$dirty&amp;&amp;form.email.$invalid}&quot;&gt;            &lt;label class=&quot;control-label&quot;&gt;邮箱&lt;/label&gt;            &lt;input autocomplete=&quot;off&quot; name=&quot;email&quot; type=&quot;email&quot; ng-model=&quot;email&quot; ng-required=&quot;true&quot; ng-minlength=&quot;5&quot; ng-maxlength=&quot;30&quot; class=&quot;form-control&quot; placeholder=&quot;邮箱&quot;&gt;            &lt;div ng-show=&quot;form.email.$dirty&amp;&amp;form.email.$error.minlength&quot; class=&quot;alert alert-danger help-block&quot;&gt;                至少5位            &lt;/div&gt;            &lt;div ng-show=&quot;form.email.$dirty&amp;&amp;form.email.$error.maxlength&quot; class=&quot;alert alert-danger help-block&quot;&gt;                最多30位            &lt;/div&gt;            &lt;div ng-show=&quot;form.email.$dirty&amp;&amp;form.email.$error.email&quot; class=&quot;alert alert-danger help-block&quot;&gt;                邮箱不对            &lt;/div&gt;        &lt;/div&gt;</code></pre><p>angular里内置了邮箱的验证，将<code>input</code>的<code>type</code>改为<code>email</code>就行了，错误的返回值用<code>formName.inputName.$error.email</code>查看即可，不过个人觉得angular自带的<em>email</em>验证还不够完善，如果需要的话可以加个正则验证(<code>ng-pattern</code>)，也可以用下面讲到的自定义验证。</p><h2 id="网址验证"><a href="#网址验证" class="headerlink" title="网址验证"></a>网址验证</h2><pre><code>&lt;div class=&quot;form-group&quot; ng-class=&quot;{&apos;has-error&apos;:form.blog.$dirty&amp;&amp;form.blog.$invalid}&quot;&gt;            &lt;label class=&quot;control-label&quot;&gt;博客&lt;/label&gt;            &lt;input autocomplete=&quot;off&quot; name=&quot;blog&quot; type=&quot;url&quot; ng-model=&quot;blog&quot; ng-required=&quot;true&quot; ng-minlength=&quot;5&quot; ng-maxlength=&quot;30&quot; class=&quot;form-control&quot; placeholder=&quot;博客&quot;&gt;            &lt;div ng-show=&quot;form.blog.$dirty&amp;&amp;form.blog.$error.minlength&quot; class=&quot;alert alert-danger help-block&quot;&gt;                至少5位            &lt;/div&gt;            &lt;div ng-show=&quot;form.blog.$dirty&amp;&amp;form.blog.$error.maxlength&quot; class=&quot;alert alert-danger help-block&quot;&gt;                最多30位            &lt;/div&gt;            &lt;div ng-show=&quot;form.blog.$dirty&amp;&amp;form.blog.$error.url&quot; class=&quot;alert alert-danger help-block&quot;&gt;                网址不对            &lt;/div&gt;        &lt;/div&gt;</code></pre><p>angular里也自带有网址的验证，只需把<code>input</code>的<code>type</code>改为<code>url</code>即可，错误的返回值用<code>formName.inputName.$error.url</code>查看。</p><h2 id="数字验证"><a href="#数字验证" class="headerlink" title="数字验证"></a>数字验证</h2><pre><code>&lt;div class=&quot;form-group&quot; ng-class=&quot;{&apos;has-error&apos;:form.age.$dirty&amp;&amp;form.age.$invalid}&quot;&gt;            &lt;label class=&quot;control-label&quot;&gt;年龄&lt;/label&gt;            &lt;input autocomplete=&quot;off&quot; name=&quot;age&quot; min=&quot;0&quot; max=&quot;99&quot; type=&quot;number&quot; ng-model=&quot;age&quot; ng-required=&quot;true&quot; class=&quot;form-control&quot; placeholder=&quot;年龄&quot;&gt;            &lt;div ng-show=&quot;form.age.$dirty&amp;&amp;form.age.$error.min&quot; class=&quot;alert alert-danger help-block&quot;&gt;                最小0            &lt;/div&gt;            &lt;div ng-show=&quot;form.age.$dirty&amp;&amp;form.age.$error.max&quot; class=&quot;alert alert-danger help-block&quot;&gt;                最大99            &lt;/div&gt;            &lt;div ng-show=&quot;form.age.$dirty&amp;&amp;form.age.$error.number&quot; class=&quot;alert alert-danger help-block&quot;&gt;                年龄不对            &lt;/div&gt;        &lt;/div&gt;</code></pre><p>angular里面也对数字验证进行了拓展，和上面一样，把<code>type</code>改为<code>number</code>，错误的返回值用<code>formName.inputName.$error.number</code>查看。可以在标签上设置属性<code>min</code>和<code>max</code>来设置最小值和最大值，返回值分别用<code>formName.inputName.$error.min</code>，和<code>formName.inputName.$error.max</code>查看。</p><h3 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h3><p>HTML：</p><pre><code>&lt;div class=&quot;form-group&quot;&gt;        &lt;label class=&quot;label-group&quot;&gt;爱好&lt;/label&gt;        &lt;label ng-repeat=&quot;hobby in hobbys&quot; class=&quot;checkbox-inline&quot;&gt;            &lt;input type=&quot;checkbox&quot; ng-checked=&quot;checked===undefined ? false : checked.indexOf(hobby.id)!==-1&quot; name=&quot;hobby&quot; ng-click=&quot;toggleSelect(hobby.id)&quot;&gt;{{hobby.name}}        &lt;/label&gt;&lt;/div&gt;</code></pre><p>JS：</p><pre><code>myApp.controller(&quot;myController&quot;,[&quot;$scope&quot;,function($scope){    $scope.hobbys = [    {        id: 1,        name: &quot;游戏&quot;    },    {        id: 2,        name: &quot;游戏2&quot;    },    {        id: 3,        name: &quot;游戏3&quot;    }];$scope.checked = [1, 2];$scope.toggleSelect = function (id) {    var index = -1;    if ($scope.checked === undefined) {        $scope.checked = [];    } else {        index = $scope.checked.indexOf(id);    }    if (index === -1) {        $scope.checked.push(id);    } else {        $scope.checked.splice(index, 1);    }}}]);</code></pre><p>这里的复选框我用了假数据(其实数据应该放在服务里面，我这里为了方便就放控制器里了)，然后用<code>ng-repeat</code>循环出来。然后用一个<code>checked</code>装已经选上爱好的<em>id</em>。下面的<code>toggleSelect</code>函数是判断<code>checked</code>数组里面是否有传进来的<em>id</em>如果没有，就加一个进去否则，删除一个。</p><h2 id="城市三级关联"><a href="#城市三级关联" class="headerlink" title="城市三级关联"></a>城市三级关联</h2><p>HTML：</p><pre><code>&lt;div class=&quot;form-group&quot;&gt;            &lt;label class=&quot;col-md-1 control-label&quot;&gt;出生地&lt;/label&gt;            &lt;div class=&quot;col-md-3&quot;&gt;                &lt;select class=&quot;form-control&quot; ng-change=&quot;area=false&quot; ng-model=&quot;city&quot; ng-options=&quot;x.id as x.name for x in cities | filterCity:0&quot;&gt;&lt;/select&gt;            &lt;/div&gt;            &lt;div ng-show=&quot;city&quot; class=&quot;col-md-3&quot;&gt;                &lt;select class=&quot;form-control&quot; ng-model=&quot;area&quot; ng-options=&quot;x.id as x.name for x in cities | filterCity:city&quot;&gt;&lt;/select&gt;            &lt;/div&gt;            &lt;div ng-show=&quot;area&amp;&amp;city&quot; class=&quot;col-md-3&quot;&gt;                &lt;select class=&quot;form-control&quot; ng-model=&quot;qu&quot; ng-options=&quot;x.id as x.name for x in cities | filterCity:area&quot;&gt;&lt;/select&gt;            &lt;/div&gt;&lt;/div&gt;</code></pre><p>JS：</p><pre><code> myApp.controller(&quot;myController&quot;,[&quot;$scope&quot;,function($scope){     $scope.cities = [    {        name: &apos;上海&apos;,        parent: 0,        id: 1        },    {        name: &apos;上海市&apos;,        parent: 1,        id: 2        },    {        name: &apos;徐汇区&apos;,        parent: 2,        id: 8        },    {        name: &apos;长宁区&apos;,        parent: 2,        id: 3        },    {        name: &apos;北京&apos;,        parent: 0,        id: 4        },    {        name: &apos;北京市&apos;,        parent: 4,        id: 5        },    {        name: &apos;东城区&apos;,        parent: 5,        id: 6        },    {        name: &apos;丰台区&apos;,        parent: 5,        id: 7        },    {        name: &apos;浙江&apos;,        parent: 0,        id: 9        },    {        name: &apos;杭州&apos;,        parent: 9,        id: 100        },    {        name: &apos;宁波&apos;,        parent: 9,        id: 11        },    {        name: &apos;西湖区&apos;,        parent: 100,        id: 12        },    {        name: &apos;北仑区&apos;,        parent: 11,        id: 13        }    ]; }]); myApp.filter(&quot;filterCity&quot;, function () { return function (city, par) {     var filterData = [];     angular.forEach(city, function (obj) {         if (obj.parent === par) {             filterData.push(obj);         }     });     return filterData; }});</code></pre><p>像这样，就做好了城市3级关联。</p><p>在HTML中第一个下拉框有个<code>ng-change=&quot;area=false</code>，作用是：当这个下拉框的值改变时，第三个下拉框隐藏。</p><p><code>ng-options</code>的作用和<code>ng-repeat</code>的作用类似，前者是循环创建<em>option</em>选项。可以看到它的值<code>x.id as x.name for x in cities</code>。<code>as</code>前面的值是<em>option</em>的<code>value</code>的值，后面的是用户可见的选项，<code>for</code>后面的表达式和<code>ng-repeat</code>的差不多。</p><p>下面的两个下拉框分别用上一个下拉框的<code>ng-model</code>值来过滤选项。</p><p>有些情况下，这三个单选框需要默认选中某个城市的某个区，这就要根据区来将父级城市选中，这时上面的JS部分增加几行代码变为：</p><pre><code>myApp.controller(&quot;myController&quot;, [&quot;$scope&quot;, function ($scope) { $scope.cities = [     {         name: &apos;上海&apos;,         parent: 0,         id: 1        },     {         name: &apos;上海市&apos;,         parent: 1,         id: 2        },     {         name: &apos;徐汇区&apos;,         parent: 2,         id: 8        },     {         name: &apos;长宁区&apos;,         parent: 2,         id: 3        },     {         name: &apos;北京&apos;,         parent: 0,         id: 4        },     {         name: &apos;北京市&apos;,         parent: 4,         id: 5        },     {         name: &apos;东城区&apos;,         parent: 5,         id: 6        },     {         name: &apos;丰台区&apos;,         parent: 5,         id: 7        },     {         name: &apos;浙江&apos;,         parent: 0,         id: 9        },     {         name: &apos;杭州&apos;,         parent: 9,         id: 100        },     {         name: &apos;宁波&apos;,         parent: 9,         id: 11        },     {         name: &apos;西湖区&apos;,         parent: 100,         id: 12        },     {         name: &apos;北仑区&apos;,         parent: 11,         id: 13        }    ]; $scope.qu = 3; $scope.parentCity = function (id) {     var parId;     if ($scope.qu !== undefined) {         angular.forEach($scope.cities, function (city) {             if (city.id === id) {                 parId = city.parent;                 return;             }         });     }     return parId; }     $scope.area = $scope.parentCity($scope.qu);     $scope.city = $scope.parentCity($scope.area); }]); myApp.filter(&quot;filterCity&quot;, function () {     return function (city, par) {         var filterData = [];         angular.forEach(city, function (obj) {             if (obj.parent === par) {                 filterData.push(obj);             }         });         return filterData;     } });</code></pre><h2 id="重置"><a href="#重置" class="headerlink" title="重置"></a>重置</h2><p>angular的重置和默认的重置又有些不同。angular的重置需要把<code>model</code>里的数据也要重置，而默认的重置还做不到这点。</p><p>现在在原来的代码基础上将代码改为：</p><p>HTML：</p><pre><code>&lt;div class=&quot;form-group&quot;&gt;    &lt;button class=&quot;btn btn-info&quot; type=&quot;reset&quot; ng-click=&quot;reset()&quot;&gt;重置&lt;/button&gt;&lt;/div&gt;</code></pre><p>JS：</p><pre><code>myApp.controller(&quot;myController&quot;, [&quot;$scope&quot;, function ($scope) { $scope.cities = [     {         name: &apos;上海&apos;,         parent: 0,         id: 1        },     {         name: &apos;上海市&apos;,         parent: 1,         id: 2        },     {         name: &apos;徐汇区&apos;,         parent: 2,         id: 8        },     {         name: &apos;长宁区&apos;,         parent: 2,         id: 3        },     {         name: &apos;北京&apos;,         parent: 0,         id: 4        },     {         name: &apos;北京市&apos;,         parent: 4,         id: 5        },     {         name: &apos;东城区&apos;,         parent: 5,         id: 6        },     {         name: &apos;丰台区&apos;,         parent: 5,         id: 7        },     {         name: &apos;浙江&apos;,         parent: 0,         id: 9        },     {         name: &apos;杭州&apos;,         parent: 9,         id: 100        },     {         name: &apos;宁波&apos;,         parent: 9,         id: 11        },     {         name: &apos;西湖区&apos;,         parent: 100,         id: 12        },     {         name: &apos;北仑区&apos;,         parent: 11,         id: 13        }    ]; $scope.init = function () {     $scope.qu = 3;     $scope.parentCity = function (id) {         var parId;         if ($scope.qu !== undefined) {             angular.forEach($scope.cities, function (city) {                 if (city.id === id) {                     parId = city.parent;                     return;                 }             });         }         return parId;     }     $scope.area = $scope.parentCity($scope.qu);     $scope.city = $scope.parentCity($scope.area);     $scope.copyQu = angular.copy($scope.qu); }; $scope.reset = function () {     $scope.qu = angular.copy($scope.copyQu);     $scope.area = $scope.parentCity($scope.qu);     $scope.city = $scope.parentCity($scope.area); }; $scope.init(); }]); myApp.filter(&quot;filterCity&quot;, function () {     return function (city, par) {         var filterData = [];         angular.forEach(city, function (obj) {             if (obj.parent === par) {                 filterData.push(obj);             }         });         return filterData;     } });</code></pre><p>在JS中，我把城市三级关联的初始化放到了一个<code>init</code>函数中，并在下面将需要的数据备份，当重置按钮被点下时运行<code>reset</code>函数，将三个下拉框的数据重置回来(在重置的时候也用到了copy是为了防止原始值和copy值互相引用，保证了数据的安全)，但是当用户在上面的用户名输入有错误时点击重置会发现下面的错误提示并没有消失，这是因为<code>$error</code>没被重置，这个时候，需要在重置函数里加上<code>$scope.formName.$setPristine();</code>就可以吧表单恢复为原始的状态，这样重置就完成了。</p><h2 id="自定义验证"><a href="#自定义验证" class="headerlink" title="自定义验证"></a>自定义验证</h2><p>在前面说了，angular可以自定义验证规则。在用自定义验证规则之前得要知道有个<code>ngModel</code>，它可以更深层地处理数据的双向绑定，可以通过设置自定义指令的<code>require</code>为<code>ngModel</code>取到，并且将<code>link</code>函数的第四个参数设置为<code>ngModelController</code></p><p>HTML：</p><pre><code>&lt;div class=&quot;form-group&quot; ng-class=&quot;{&apos;has-error&apos;:form.even.$dirty&amp;&amp;form.even.$invalid}&quot;&gt;            &lt;label class=&quot;control-label&quot;&gt;偶数&lt;/label&gt;            &lt;input autocomplete=&quot;off&quot; name=&quot;even&quot; type=&quot;number&quot; ng-model=&quot;even&quot; ng-required=&quot;true&quot; class=&quot;form-control&quot; placeholder=&quot;偶数&quot; even&gt;            &lt;div ng-show=&quot;form.even.$dirty&amp;&amp;form.even.$error.even&quot; class=&quot;alert alert-danger help-block&quot;&gt;                输入偶数            &lt;/div&gt;&lt;/div&gt;</code></pre><p>JS：</p><pre><code>myApp.directive(&apos;even&apos;, [function () {     return {         restrict: &apos;A&apos;,         require:&quot;ngModel&quot;,         link: function (scope, element, attrs,ngModelController) {             console.log(ngModelController);         }     };     }]);</code></pre><p>可以看到在控制台会输出很多属性比如：</p><pre><code>1. $formatters 保存的是从modelValue向viewValue绑定过程中的处理函数2. $setViewValue 当view发生了某件事情时，从view向model绑定调用$setViewValue把viewValue保存下来3. $render 当模型发生变化时，应该怎么去更新视图，从model向view绑定，调用ctrl.$render方法，将viewValue渲染到页面上4. $setValidity 设置验证结果，第一个参数是验证错误的名字，第二个是true or false5. $viewValue 视图的值6. $modelValue 模型里的值7. $parsers保存从viewValue向modelValue绑定过程中的处理函数，它们将来会依次执行</code></pre><p>这样就可以写自定义验证了，接下来，把JS代码改为：</p><pre><code>myApp.directive(&apos;even&apos;, [function () { return {     restrict: &apos;A&apos;,     require: &quot;ngModel&quot;,     link: function (scope, element, attrs, ngModelController) {         console.log(ngModelController);         ngModelController.$parsers.push(function (viewValue) {             if (viewValue % 2 === 0) {                 ngModelController.$setValidity(&quot;even&quot;, true);                 return viewValue;             } else {                 ngModelController.$setValidity(&quot;even&quot;, false);             }         });     } }; }]);</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;angular表单验证&quot;&gt;&lt;a href=&quot;#angular表单验证&quot; class=&quot;headerlink&quot; title=&quot;angular表单验证&quot;&gt;&lt;/a&gt;angular表单验证&lt;/h1&gt;&lt;p&gt;angular自带有一套功能强大的表单验证功能，另外还拓展了一些验证功能(number，url，email，reset)，还能给我们自定义验证方法，用起来特别方便。&lt;/p&gt;
&lt;p&gt;首先，先得把bootstrap的样式引进来，这样就不用自己写样式了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="基础" scheme="https://github.com/JayZangwill/blog/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="angular" scheme="https://github.com/JayZangwill/blog/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>angular学习笔记(2)</title>
    <link href="https://github.com/JayZangwill/blog/2016/10/14/angular%20Study%20notes-2/"/>
    <id>https://github.com/JayZangwill/blog/2016/10/14/angular Study notes-2/</id>
    <published>2016-10-14T00:05:20.000Z</published>
    <updated>2018-03-19T13:55:03.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="angular学习笔记-2"><a href="#angular学习笔记-2" class="headerlink" title="angular学习笔记(2)"></a>angular学习笔记(2)</h1><p>这里接着上一篇继续写笔记，废话不多说，直接进入正题……</p><h1 id="angular的服务"><a href="#angular的服务" class="headerlink" title="angular的服务"></a>angular的服务</h1><p>上篇文章说到，不要去试图复用<code>controller</code>。但是如果两个<code>controller</code>中有相同的功能该怎么办？</p><p>这个时候服务就起到作用了。angular内置有很多服务给我们使用，当然也可以给我们自定义服务。</p><a id="more"></a><h2 id="http服务"><a href="#http服务" class="headerlink" title="$http服务"></a>$http服务</h2><p>$http服务是angular中使用得最频繁的服务，因为前台要不断和后台交互，所以$http使用得最频繁的一个服务。</p><p>HTML：</p><pre><code>&lt;div ng-controller=&quot;myController&quot;&gt;    &lt;ul&gt;        &lt;li ng-repeat=&quot;data in datas&quot;&gt;{{data.data}}&lt;/li&gt;    &lt;/ul&gt;&lt;/div&gt;</code></pre><p>JS：</p><pre><code>myApp.controller(&quot;myController&quot;,[&quot;$scope&quot;,&quot;$http&quot;,function($scope,$http){    $http({        method:&quot;GET&quot;,        url:&quot;dataUrl&quot;    }).success(function(data,status){        $scope.datas=data;    }).error(function(data,status){        consloe.log(&quot;error&quot;)    });}]);</code></pre><p>模拟的数据：</p><pre><code>[    {        &quot;data&quot;:&quot;1&quot;    },    {        &quot;data&quot;:&quot;2&quot;    },    {        &quot;data&quot;:&quot;3&quot;    }]</code></pre><p>这样就会在页面输出：</p><pre><code>·1·2·3</code></pre><p>这个和jquery的<code>$.ajax</code>方法很相似,<a href="https://docs.angularjs.org/api/ng/service/$http" target="_blank" rel="noopener">这个是$http的API</a>，嘿嘿~。</p><h2 id="filter服务"><a href="#filter服务" class="headerlink" title="$filter服务"></a>$filter服务</h2><p><code>$filte</code>也是angular中比较常用的服务，angular内置了9个filter分别是：currency(货币)，date(日期)，json(将数据转化为json)，lowercase(小写)，number(数字)，orderBy(排序)，uppercase(大写)，limitTo(限定字符串或者数组长度)。</p><p>filter可以嵌套使用(使用管道符号|分隔)。</p><pre><code>&lt;p&gt;{{time| date:"y-M-d H-m-s"}}&lt;/p&gt;</code></pre><p>例如上面这个会在页面输出年、月、日、时、分、秒。</p><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><p>这里用上面的http的例子：</p><p>HTML改为：</p><pre><code>&lt;div ng-controller=&quot;myController&quot;&gt;    &lt;ul&gt;        &lt;li ng-repeat=&quot;data in datas | myFilter&quot;&gt;{{data.data}}&lt;/li&gt;    &lt;/ul&gt;&lt;/div&gt;</code></pre><p>JS中添加：</p><pre><code>myApp.filter(&quot;myFilter&quot;, function () {        return function (obj) {            var newObj = [];            angular.forEach(obj, function (obj) {                if (obj.data.indexOf(&quot;1&quot;) !== -1) {                    newObj.push(obj);                }            });            return newObj;        }    });</code></pre><p>上面代码执行完以后会在页面打印出：</p><pre><code>·1</code></pre><p>当然，还有一种方法是在<code>$scope</code>上定义一个方法用作过滤器：</p><p>HTML：</p><pre><code>&lt;div ng-controller=&quot;myController&quot;&gt;    &lt;ul&gt;        &lt;li ng-repeat=&quot;data in datas | filter: myFilter&quot;&gt;{{data.data}}&lt;/li&gt;    &lt;/ul&gt;&lt;/div&gt;</code></pre><p>JS：</p><pre><code>myApp.filter(&quot;myFilter&quot;, function () {        return function (obj) {            var newObj = [];            angular.forEach(obj, function (obj) {                if (obj.data.indexOf(&quot;1&quot;) !== -1) {                    newObj.push(obj);                }            });            return newObj;        }        $scope.myFilter=function(obj){            if (obj.data.indexOf(&quot;1&quot;) !== -1) {                    return true;                }            return false;        }    });</code></pre><p>这样也可以得到同样的结果。</p><p>当然，还有其他方法，在这我就不一一列举了。</p><h2 id="自定义服务"><a href="#自定义服务" class="headerlink" title="自定义服务"></a>自定义服务</h2><p>在angular中有三种方法自定义服务，分别是<code>$provide.provider</code>，<code>factory</code>，<code>server</code>，这些方法的本质都是<code>provider</code>，只不过是后面两种方法将<code>$provide.provider</code>封装了一下，让我们使用起来更方便。</p><p>HTML：</p><pre><code>&lt;div ng-controller=&quot;myController&quot;&gt;&lt;/div&gt;</code></pre><p>JS:</p><pre><code>var myApp = angular.module(&quot;myApp&quot;, [], [&quot;$provide&quot;,function ($provide) {        $provide.provider(&quot;myServer&quot;, function () {            this.$get = function () {                return function () {                    console.log(&quot;myServer&quot;);                }            }        });        $provide.factory(&quot;myServer2&quot;,function(){           return function(){               console.log(&quot;myServer2&quot;);           }         });        $provide.service(&quot;myServer3&quot;,function(){           return function(){               console.log(&quot;myServer3&quot;);           }         });             }]);myApp.controller(&quot;myController&quot;,[&quot;$scope&quot;,&quot;myServer&quot;,&quot;myServer2&quot;,&quot;myServer3&quot;,function($scope,myServer,myServer2,myServer3){    myServer();    myServer2();    myServer3();}]);</code></pre><p>在上面，用三种方法创建了三个服务，运行以后在控制台会输出<em>myServer</em>、<em>myServer2</em>、<em>myServer3</em>。下面两个方法虽然写法一样，但是还是有些不同的，<code>factory</code>能返回所有数据类型的数据，而<code>service</code>只能返回对象或者应用类型的数据，例如：<code>service</code>不能直接返回字符串。</p><p>后面两种快捷方法可以不用写在回调函数里面，可以写成：</p><pre><code>myApp.factory(&quot;serverName&quot;,function(){    return ...});myApp.service(&quot;serverName&quot;,function(){    return ...});</code></pre><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>angular提供了一个路由的功能用于改变视图。只要链接改变，就可以改变相应的视图。如果需要使用得通过npm把<em>angular-router</em>从网上下下来。</p><p>使用的时候需要先注册：</p><pre><code>var myApp = angular.module(&quot;myApp&quot;, [&apos;ngRoute&apos;]); </code></pre><p>完以后就可以使用了，首先，主html文件里面加上：</p><pre><code>&lt;div ng-view&gt;&lt;/div&gt;</code></pre><p><em>1.html</em>文件上(文件名可以随意取，文件内容也可以自己定)：</p><pre><code>&lt;ul&gt;    &lt;li ng-repeat=&quot;t in texts&quot;&gt;&lt;/li&gt;&lt;/ul&gt;</code></pre><p><em>2.html</em>：</p><pre><code>&lt;h1&gt;我是标题&lt;/h1&gt;&lt;p ng-bind=&quot;text&quot;&gt;&lt;/p&gt;</code></pre><p>JS：</p><pre><code>myApp.controller(&quot;helloCtrl&quot;,[&quot;$scope&quot;,function($scope){        $scope.texts=[&quot;hello world&quot;,&quot;hello angular&quot;];    }]);myApp.controller(&quot;textCtrl&quot;,[&quot;$scope&quot;,function($scope){        $scope.text=&quot;我是内容&quot;;    }]);/*路由的配置*/myApp.config(function($routeProvider){    $routerProvider.when(&quot;/hello&quot;,{        templateUrl:&quot;1.html&quot;,        controller:&quot;helloCtrl&quot;    }).when(&quot;/text&quot;,{        templateUrl:&quot;2.html&quot;,        controller:&quot;textCtrl&quot;    }).otherwise({        redirectTo:&quot;/hello&quot;    })});</code></pre><p>从上面的js文件的配置可以看出，当地址栏输入<code>/hello</code>结尾的当前服务器地址时会将<code>1.html</code>里的内容放到主html文件的<code>&lt;div ng-view&gt;&lt;/div&gt;</code>内，当输入<code>/text</code>时就是<code>2.html</code>，其他的都默认为以<code>/hello</code>结尾，下面的控制器是必不可少的，用于控制相应的视图。</p><p>如果细心观察，会发现地址栏上的<code>/</code>前面会有个<code>#</code>，这个是为了防止浏览器向后台发送请求。</p><p>angular自带的路由有个缺陷，就是不能进行深层的嵌套路由。深层的嵌套路由就是路由里面还有路由。</p><p>不过，有个第三方的angular插件填补了这个缺陷，那就是<a href="https://ui-router.github.io/" target="_blank" rel="noopener">ui-router</a>，这个插件也得用npm下载：<code>npm i angular-ui-router</code></p><p>使用时，也需要像angular-router一样那样注册：</p><pre><code>var myApp = angular.module(&quot;myApp&quot;, [&apos;ui.router&apos;]);</code></pre><p>主html改为：</p><pre><code>&lt;div ui-view&gt;&lt;/div&gt;</code></pre><p>1.html：</p><pre><code>&lt;h1&gt;1 page&lt;/h1&gt;&lt;p&gt;1&lt;/p&gt;&lt;div ui-view=&quot;home&quot;&gt;&lt;/div&gt;</code></pre><p>home.html：</p><pre><code>&lt;hr&gt;&lt;h1&gt;home page&lt;/h1&gt;&lt;a ui-sref=&quot;link&quot;&gt;link&lt;/a&gt;</code></pre><p>link.html：</p><pre><code>&lt;h1&gt;link page&lt;/h1&gt;</code></pre><p>JS：</p><pre><code>myApp.config(function($stateProvider,$urlRouterProvider){    $urlRouterProvider.otherwise(&quot;/index&quot;);    $stateProvider.state(&quot;index&quot;,{        url:&quot;/index&quot;,        views:{            &quot;&quot;:{                templateUrl:&quot;1.html&quot;            },            &quot;home@index&quot;:{                templateUrl:&quot;home.html&quot;            }        }    }).state(&quot;link&quot;,{        url:&quot;/link&quot;,        views:{            &quot;&quot;:{                templateUrl:&quot;link.html&quot;            }        }    });});</code></pre><p>从js的配置可以看出，打开页面默认是以<code>/index</code>结尾的视图。</p><p>打开页面可以看到<em>1.html</em>的内容(一个标题，一段文字)，<em>1.html</em>里面又嵌套了一个<em>home.html</em>的视图(一条线，一个标题，一个链接)，链接点开后会转到<em>link.html</em>的视图(一个标题)。</p><p><strong>tip</strong>：<code>home@index</code>的<code>home</code>代表主页面嵌套视图里面的<code>ui-view</code>的值，a链接里的<code>ui-sref</code>的值代表<code>state</code>的第一个参数。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;angular学习笔记-2&quot;&gt;&lt;a href=&quot;#angular学习笔记-2&quot; class=&quot;headerlink&quot; title=&quot;angular学习笔记(2)&quot;&gt;&lt;/a&gt;angular学习笔记(2)&lt;/h1&gt;&lt;p&gt;这里接着上一篇继续写笔记，废话不多说，直接进入正题……&lt;/p&gt;
&lt;h1 id=&quot;angular的服务&quot;&gt;&lt;a href=&quot;#angular的服务&quot; class=&quot;headerlink&quot; title=&quot;angular的服务&quot;&gt;&lt;/a&gt;angular的服务&lt;/h1&gt;&lt;p&gt;上篇文章说到，不要去试图复用&lt;code&gt;controller&lt;/code&gt;。但是如果两个&lt;code&gt;controller&lt;/code&gt;中有相同的功能该怎么办？&lt;/p&gt;
&lt;p&gt;这个时候服务就起到作用了。angular内置有很多服务给我们使用，当然也可以给我们自定义服务。&lt;/p&gt;
    
    </summary>
    
    
      <category term="基础" scheme="https://github.com/JayZangwill/blog/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="angular" scheme="https://github.com/JayZangwill/blog/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>angular学习笔记(1)</title>
    <link href="https://github.com/JayZangwill/blog/2016/10/11/angular%20Study%20notes/"/>
    <id>https://github.com/JayZangwill/blog/2016/10/11/angular Study notes/</id>
    <published>2016-10-11T00:26:23.000Z</published>
    <updated>2018-03-19T13:55:03.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="angular学习笔记-1"><a href="#angular学习笔记-1" class="headerlink" title="angular学习笔记(1)"></a>angular学习笔记(1)</h1><p>由于之前学习了vue，所以学习angular感觉还蛮顺的，因为这两个框架有很多相似之处，例如：</p><pre><code>1. 输出都可以用双括号{{}}2. 都有双向数据绑定3. 指令也有很多相似的地方，这里就不一一列举了</code></pre><a id="more"></a><p>下面准备开始，在开始之前先说明：下面代码的html文件的文档声明，还有头标签、文件的引入都省略了，直接从<code>ng-app</code>的内部开始写代码，js文件的模块声明如果没有特殊情况会默认使用<code>var myApp=angular.module(&quot;myApp&quot;,[]);</code></p><h1 id="angular的模块化"><a href="#angular的模块化" class="headerlink" title="angular的模块化"></a>angular的模块化</h1><p>在学习angular听到最多的就是模块化，任何一个功能都是模块。 </p><p>首先，要想用angular就得先引入angular.js文件，然后在<em>.html</em>文件中标签加入<code>ng-app</code>属性，(一般加在<code>html</code>标签或者<code>body</code>后面加，作为根部作用域)，告诉angular下面这块内容由angular管，同时自动启动angular，例如以下代码： </p><pre><code>&lt;html ng-app=&quot;myApp&quot;&gt;    &lt;!--这里是angular的作用范围--&gt;&lt;/html&gt;</code></pre><p>然后在自己的<em>.js</em>文件中声明一个变量，用于储存angular返回的模块： </p><pre><code>var myApp=angular.module(&quot;myApp&quot;,[]);</code></pre><p>括号中的<code>myApp</code>是标签中<code>ng-app</code>的属性值<code>&quot;myApp&quot;</code>，后面的中括号是模块的依赖项，第三个参数是一个回调函数，用来定义angular的一些服务。</p><p>如果在<em>html</em>文件里面如果没有写<code>ng-app</code>，这个时候就得在<em>js</em>文件里手动启动angular： </p><pre><code>angular.element(document).ready(function(){    angular.bootstrap(document,&quot;myApp&quot;);});</code></pre><p>同一个<code>ng-app</code>不能启动两次，如果启动两次会报错！</p><p><strong>注意：</strong>一般一个应用中只能有一个<code>ng-app</code>，当然有少数情况也会有多个<code>ng-app</code>，但是<code>ng-app</code>不能嵌套在<code>ng-app</code>中，这个时候第二个以后的<code>ng-app</code>需要手动启动，不过一般不建议有多个<code>ng-app</code>。</p><h1 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h1><p>一个应用中可以有多个控制器，一般一个控制器用于管理应用中的一个功能，例如：</p><p>HTML：</p><pre><code>&lt;div ng-controller=&quot;controller1&quot;&gt;    &lt;!--这里是一些指令--&gt;&lt;/div&gt;&lt;div ng-controller=&quot;controller2&quot;&gt;    &lt;!--这里是一些指令--&gt;&lt;/div&gt;</code></pre><p>JS：</p><pre><code>myApp.controller(&quot;controller1&quot;,[&quot;$scope&quot;,function($scope){    //这里是一些逻辑}]);myApp.controller(&quot;controller2&quot;,[&quot;$scope&quot;,function($scope){    //这里是一些逻辑}]);</code></pre><p>js中的<code>myApp</code>就是上面<code>angular.module(&quot;myApp&quot;,[])</code>返回的模块，调用<code>controller</code>方法创建一个控制器，第一个参数是HTML中<code>ng-controller</code>的属性值，第二个参数是一个数组，里面包含了控制器的一些依赖还有回调函数，<code>$scope</code>是angular的作用域，一般用于存储各种变量。</p><p>在angular中还有一个<code>$rootScope</code>，它是angular的根作用域链，类似于js中的全局作用域，定义在<code>$rootScrop</code>上的变量所有控制器都可以访问。</p><p><strong>注意：</strong></p><pre><code>1. 不要去复用controller，一个控制器一般只负责一块视图2. 不要再controller中操作DOM，这不是控制器的职责3. 不要再controller里面做数据格式化4. 不要再controller里面做数据操作5. 一般来说，controller不会互相调用，控制器之间的交互只会通过事件来进行</code></pre><h1 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h1><p>当年angular火有一部分原因是因为它实现了数据的双向绑定，这是其他框架都没有实现的。<br>所谓的双向数据绑定就是：数据模型里面的值变了，视图也会跟着变，反过来也是，像下面：</p><p>HTML：</p><pre><code>&lt;div ng-controller=&quot;controller&quot;&gt;   &lt;input type=&quot;text&quot; ng-model=&quot;name&quot;&gt;   &lt;div&gt;{{name}}&lt;div&gt;&lt;/div&gt;</code></pre><p>JS：</p><pre><code>myApp.controller(&quot;controller&quot;,[&quot;$scope&quot;,function($scope){    $scope.name=&quot;张三&quot;;}]);</code></pre><p>运行以上代码在页面中就会看见有一个输入框里面的值是张三，下面有一段字也是张三。当我们改变输入框中的值会发现下面的那段字也会变，这就实现了数据的双向绑定。</p><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><p>angular还有一个吸引人的地方就是指令系统。angular内置了很多的指令，同时，还可以让我们自定义指令。前面说到的<code>ng-app</code>和<code>ng-controller</code>就是指令。</p><h2 id="ng-bind"><a href="#ng-bind" class="headerlink" title="ng-bind"></a>ng-bind</h2><p>HTML：</p><pre><code>&lt;div ng-bind=&quot;name&quot;&gt;&lt;/div&gt;</code></pre><p>JS：</p><pre><code>myApp.controller(&quot;controller&quot;,[&quot;$scope&quot;,function($scope){    $scope.name=&quot;张三&quot;;}]);</code></pre><p>在页面中也会输出张三，和<em>双花括号</em>的作用一样，但是使用<code>ng-bind</code>的好处就是，当页面加载速度慢的时候页面中不会出现<em>双花括号</em>，保证了页面的美观性。</p><h2 id="ng-class"><a href="#ng-class" class="headerlink" title="ng-class"></a>ng-class</h2><p>HTML：</p><pre><code>&lt;div ng-class=&quot;my-style:true&quot;&gt;&lt;/div&gt;</code></pre><p><code>ng-class</code>一般用于控制class是否使用，如果<code>:</code>后面的表达式为<code>true</code>，就使用<code>:</code>前面的类名。</p><h2 id="ng-show和ng-hide"><a href="#ng-show和ng-hide" class="headerlink" title="ng-show和ng-hide"></a>ng-show和ng-hide</h2><p>HTML：</p><pre><code>&lt;div ng-show=&quot;true&quot;&gt;我是显示的&lt;/div&gt;&lt;div ng-hide=&quot;true&quot;&gt;我是隐藏的&lt;/div&gt;</code></pre><p>当<code>ng-show</code>后面的变量为<code>true</code>时，这个html元素就会显示，为<code>false</code>时就回隐藏，<code>ng-hide</code>刚好相反。</p><h2 id="ng-repeat"><a href="#ng-repeat" class="headerlink" title="ng-repeat"></a>ng-repeat</h2><p>HTML：</p><pre><code>&lt;div ng-controller=&quot;myController&quot;&gt;    &lt;ul&gt;        &lt;li ng-repeat=&quot;data in datas&quot;&gt;{{data}}&lt;/li&gt;    &lt;/ul&gt;&lt;/div&gt;</code></pre><p>JS：</p><pre><code>myApp.controller(&quot;myController&quot;,[&quot;$scope&quot;,function($scope){    $scope.datas=[&quot;张三&quot;，&quot;李四&quot;,&quot;王五&quot;];}]);</code></pre><p>这个时候页面就会输出：</p><pre><code>1. 张三2. 李四3. 王五</code></pre><p><code>ng-repeat</code>就是用来遍历数据，并且把数据在页面中全部渲染出来，非常方便。</p><h2 id="ng-style"><a href="#ng-style" class="headerlink" title="ng-style"></a>ng-style</h2><p>HTML：</p><pre><code>&lt;div ng-style=&quot;{&apos;color&apos;:&apos;red&apos;,&apos;background-color&apos;:&apos;green&apos;}&quot;&gt;字的颜色石红的，背景是绿的&lt;/div&gt;</code></pre><h2 id="ng-class-even和ng-class-odd"><a href="#ng-class-even和ng-class-odd" class="headerlink" title="ng-class-even和ng-class-odd"></a>ng-class-even和ng-class-odd</h2><p>HTML：</p><pre><code>&lt;div ng-controller=&quot;myController&quot;&gt;    &lt;ul&gt;        &lt;li ng-class-even=&quot;&apos;even-style&apos;&quot; ng-class-odd=&quot;&apos;odd-style&apos;&quot; ng-repeat=&quot;data in datas&quot;&gt;{{data}}&lt;/li&gt;    &lt;/ul&gt;&lt;/div&gt;</code></pre><p>JS：</p><pre><code>myApp.controller(&quot;myController&quot;,[&quot;$scope&quot;,function($scope){    $scope.datas=[&quot;张三&quot;，&quot;李四&quot;,&quot;王五&quot;];}]);</code></pre><p>这样当<code>li</code>为奇数时，就会用<code>even-style</code>的class类，当<code>li</code>为偶数时就会用<code>odd-style</code>的class类。</p><h2 id="ng-click"><a href="#ng-click" class="headerlink" title="ng-click"></a>ng-click</h2><p>HTML：</p><pre><code>&lt;div ng-controller=&quot;myController&quot;&gt;    &lt;button ng-click=&quot;changeStatus()&quot;&gt;点我&lt;/button&gt;&lt;/div&gt;&lt;p&gt;{{status}}&lt;/p&gt;</code></pre><p>JS：</p><pre><code>myApp.controller(&quot;myController&quot;,[&quot;$scope&quot;,function($scope){    $scope.status=false;    $scope.changeStatus=function(){        $scope.status=!$scope.status;    }}]);</code></pre><p>每点一次按钮，<code>changeStatus</code>函数就会执行一次，<code>stauts</code>的值就会改变一次</p><h2 id="ng-switch"><a href="#ng-switch" class="headerlink" title="ng-switch"></a>ng-switch</h2><p>HTML：</p><pre><code>&lt;div ng-controller=&quot;myController&quot;&gt;    &lt;button ng-click=&quot;changeStatus()&quot;&gt;点我&lt;/button&gt;        &lt;ol switch=&quot;status&quot;&gt;            &lt;li ng-switch-when=&quot;true&quot;&gt;                当值为true才会显示            &lt;/li&gt;            &lt;li ng-switch-when=&quot;false&quot;&gt;                当值为false才会显示            &lt;/li&gt;        &lt;/ol&gt;&lt;/div&gt;&lt;p&gt;{{status}}&lt;/p&gt;</code></pre><p>JS：</p><pre><code>myApp.controller(&quot;myController&quot;,[&quot;$scope&quot;,function($scope){    $scope.status=false;    $scope.changeStatus=function(){        $scope.status=!$scope.status;    }}]);</code></pre><h2 id="ng-init"><a href="#ng-init" class="headerlink" title="ng-init"></a>ng-init</h2><p>HTML：</p><pre><code>&lt;div ng-init=&quot;[firstName=&apos;张&apos;,lastName=&apos;三&apos;]&quot;&gt;    {{firstName+lastName}}&lt;/div&gt;</code></pre><p>这是页面就会输出<code>&quot;张三&quot;</code>。<code>ng-init</code>用于初始化变量，不过初始化变量一般不这么做。</p><h2 id="ng-src"><a href="#ng-src" class="headerlink" title="ng-src"></a>ng-src</h2><p>HTML：</p><pre><code>&lt;img ng-src={{imgUrl}} alt=&quot;图片&quot;&gt;</code></pre><p><code>ng-src</code>是用于解决 <code>src</code>属性用ng表达式bug的一个指令，如果地址中包含ng表达式，用<code>ng-src</code>比较好。</p><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>在angular内置的这些指令中肯定是不够用的，所以，angualr可以给我们自定义指令：</p><p>HTML：</p><pre><code>&lt;hello-world&gt;oldValue&lt;/hello-world&gt;&lt;div class=&quot;hello-world&quot;&gt;oldValue&lt;/div&gt;&lt;!-- directive:hello-world --&gt;&lt;div&gt;oldValue&lt;/div&gt;&lt;div hello-world&gt;oldValue&lt;/div&gt;</code></pre><p>JS：</p><pre><code>myApp.directive(&quot;helloWorld&quot;,[function(){    return{        restrict: &apos;ECMA&apos;,        template:&quot;&lt;div&gt;newValue&lt;span ng-transclude&gt;&lt;/span&gt;&lt;/div&gt;&quot;,        replace:true,        transclude:true,        link:function(){            //在这里可以操作DOM、给元素绑定事件        }    }}]);</code></pre><p>js部分有个<code>restrict</code>这个是匹配模式，用于匹配不同的属指令创建方式。</p><p>E代表匹配元素模式，也就是我们说的html标签<code>&lt;hello-world&gt;oldValue&lt;/hello-world&gt;</code>，当需要创建带有自己的模板的指令时，使用这种方法。</p><p>C匹配class模式，就是上面的<code>&lt;div class=&quot;hello-world&quot;&gt;oldValue&lt;/div&gt;</code></p><p>M代表匹配注释模式，就是上面的<code>&lt;!-- directive:hello-world --&gt; &lt;div&gt;oldValue&lt;/div&gt;</code>，这里需要注意的就是注释的开头和结尾要有个空格，不然angular是识别不出的。</p><p>A代表属性模式，即<code>&lt;div hello-world&gt;oldValue&lt;/div&gt;</code>，当要为已有的HTML标签增加功能时，使用这种方法创建指令，这也是angular默认的匹配方式。</p><p><code>template</code>是填充到标签里的内容</p><p><code>template</code>里可以看到有个<code>ng-transclude</code>指令，这个指令是在下面的<code>replace</code>和<code>transclude</code>值为<code>true</code>时才有用。当<code>replace</code>为真时原来的<em>oldValue</em>会被替换成<code>template</code>里的内容，但是我们有时候希望保留<em>oldValue</em>，所以把<code>transclude</code>设为<code>true</code>，这个时候angular就知道要把<em>oldValue</em>保存下来。但是保留下来得有地方放，这个时候在<code>template</code>里面加个<code>ng-transclude</code>指令，就可以把<em>oldValue</em>放进去。</p><p><code>template</code>可以换成<code>templateUrl</code>，后面接的是其他的html文件的地址。</p><p><code>link</code>函数可以操作DOM、绑定事件、绑定作用域。</p><p>最终代码执行完后会得到(以<code>&lt;hello-world&gt;oldValue&lt;/hello-world&gt;</code>的结果为例)：</p><pre><code>&lt;div&gt;    newValue    &lt;span ng-transclude=&quot;&quot;&gt;&lt;/span&gt;    &lt;div&gt;oldValue&lt;/div&gt;&lt;/div&gt;</code></pre><h3 id="自定义指令的controller和controllAs"><a href="#自定义指令的controller和controllAs" class="headerlink" title="自定义指令的controller和controllAs"></a>自定义指令的controller和controllAs</h3><p>还是上面的代码，将JS部分改为：</p><pre><code> var myApp = angular.module(&quot;myApp&quot;, []); myApp.directive(&quot;helloWorld&quot;, [function () {     return {         restrict: &apos;ECMA&apos;,         template: &quot;&lt;div&gt;newValue&lt;span ng-transclude&gt;&lt;/span&gt;&lt;/div&gt;&quot;,         replace: true,         transclude: true,         controller:function($scope){             console.log($scope);         },         link: function () {             //在这里可以操作DOM、给元素绑定事件         }     }}]);myApp.controller(&apos;myController&apos;, [&apos;$scope&apos;, function ($scope) {    console.log($scope);}]);</code></pre><p>这样在控制台输出的两个<code>$scope</code>实际上是同一个<code>$scope</code>。上面那个<code>controller</code>写在那里，其他指令可以通过<code>require</code>属性获得这个<code>controller</code>里面的东西，实现多个指令通过依赖注入进行通信。</p><h3 id="require"><a href="#require" class="headerlink" title="require"></a>require</h3><p><code>require</code>可以将其他指令传递给自己，有三个用法：</p><pre><code>1. 通过驼峰法(directiveName)的命名指定了控制器应该带有哪一条指令，默认从同一个元素上的指令找2. ^directiveName，在父级查找3. ?directiveName，指令可选，找不到不要抛出异常</code></pre><p>现在，上面的代码改成了：</p><pre><code> myApp.directive(&quot;helloWorld&quot;, [function () { return {     restrict: &apos;ECMA&apos;,     template: &quot;&lt;div&gt;newValue&lt;span ng-transclude&gt;&lt;/span&gt;&lt;btn&gt;&lt;/btn&gt;&lt;/div&gt;&quot;,     replace: true,     transclude: true,     controller:function($scope){         this.fun=function(){             alert(&quot;s&quot;);         }     },     controllerAs:&quot;test&quot;,     link: function (scope,element,attr,test) {         element.on(&quot;click&quot;,test.fun);     } }}]);myApp.directive(&apos;btn&apos;, [function () {    return {        restrict: &apos;E&apos;,        require:&quot;^helloWorld&quot;,        replace:true,        template:&quot;&lt;button&gt;点我&lt;/button&gt;&quot;,        link: function (scope, element, attrs,test) {            element.on(&quot;click&quot;,test.fun);        }    };}]);</code></pre><p>点击按钮会发现弹出两次a。那是因为在<code>helloWorld</code>指令里的<code>link</code>函数调用了一次<code>this.fun</code>下面的<code>btn</code>也调用了一次。如果点击文字就只会弹出一次。</p><p>这里的<code>require</code>用了<code>^</code>是因为<code>helloWorld</code>是<code>btn</code>的父级。</p><h3 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h3><h4 id="scope-true"><a href="#scope-true" class="headerlink" title="scope:true"></a>scope:true</h4><p>在上面说了自定义指令里的<code>controller</code>和下面的<code>myController</code>是同一个控制器。但是当我在自定义指令里(<code>helloWorld</code>指令)加一句<code>scope:true</code>时，这两个控制器就有不同的作用域了：</p><pre><code>myApp.directive(&quot;helloWorld&quot;, [function () {     return {         restrict: &apos;ECMA&apos;,         template: &quot;&lt;div&gt;newValue&lt;span ng-transclude&gt;&lt;/span&gt;&lt;btn&gt;&lt;/btn&gt;&lt;/div&gt;&quot;,         replace: true,         scope:true,         transclude: true,         controller:function($scope){             console.log($scope);             this.fun=function(){                 alert(&quot;s&quot;);             }         },         controllerAs:&quot;test&quot;     }}]);</code></pre><p>这时，控制台输出的两个<code>scope</code>，展开来看会发现它们的<em>id</em>不一样，<em>id</em>小的那个是<em>id</em>大的父作用域，子作用域可以继承父作用域里的属性，父作用域读不到子作用域里的属性。</p><h4 id="scope-1"><a href="#scope-1" class="headerlink" title="scope:{}"></a>scope:{}</h4><p>当<code>scope:{}</code>会创建一个独立作用域，有父元素，但是继承不到父元素的属性。</p><p>这个对象有三个参数：</p><pre><code>1 .&amp;:把父作用域包装成一个函数，从而以函数的方式读写父作用域的属性2 .=:作用域的属性与父作用域的属性双向绑定3 .@：只能读取父作用域里的值</code></pre><p>HTML：</p><pre><code>&lt;div ng-controller=&quot;myController&quot;&gt;    &lt;div hello-world a-data=&quot;data&quot; b-data=&quot;data&quot; data=&quot;{{data}}&quot;&gt;oldValue&lt;/div&gt;    {{data}}&lt;/div&gt;</code></pre><p>JS：</p><pre><code> myApp.directive(&quot;helloWorld&quot;, [function () {     return {         restrict: &apos;ECMA&apos;,         template: &quot;&lt;div&gt;newValue&lt;span ng-transclude&gt;&lt;/span&gt;&lt;btn&gt;&lt;/btn&gt;&lt;/div&gt;&quot;,         replace: true,         scope:{             a:&quot;&amp;aData&quot;,             b:&quot;=bData&quot;,             data:&quot;@&quot;         },         transclude: true,         controller:function($scope){             console.log($scope.a());             console.log($scope.b);             console.log($scope.data);             this.fun=function(){                 $scope.$apply(function(){                    $scope.b=&quot;aaaa&quot;;                  });             }         },         controllerAs:&quot;test&quot;     }}]);</code></pre><p>在html中我加了三个属性分别为：<code>a-data</code>，<code>b-data</code>，<code>data</code>分别对应着JS中的<code>a</code>，<code>b</code>，<code>data</code>。第三个是简写形式，如果名字和属性名相同，则后面的名字可以不用写。</p><p>当按下按钮会发现页面上的<em>data</em>变为<em>aaaa</em>这就说明<code>b</code>是双向绑定的</p><p><strong>tips:</strong><code>@</code>不能读到对象；使用<code>@</code>时html标签里的属性值需要用双花括号括起来。</p><p><strong>小补充：</strong><code>priority</code>是用来设置指令的权值，也就是指令执行的顺序。<code>terminal</code>设置是否以当前设置的<code>priority</code>为界限，如果小于设置的<code>priority</code>就不执行。</p><p>就到这里，打完收工！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;angular学习笔记-1&quot;&gt;&lt;a href=&quot;#angular学习笔记-1&quot; class=&quot;headerlink&quot; title=&quot;angular学习笔记(1)&quot;&gt;&lt;/a&gt;angular学习笔记(1)&lt;/h1&gt;&lt;p&gt;由于之前学习了vue，所以学习angular感觉还蛮顺的，因为这两个框架有很多相似之处，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 输出都可以用双括号{{}}
2. 都有双向数据绑定
3. 指令也有很多相似的地方，这里就不一一列举了
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="基础" scheme="https://github.com/JayZangwill/blog/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="angular" scheme="https://github.com/JayZangwill/blog/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>初尝vue</title>
    <link href="https://github.com/JayZangwill/blog/2016/08/14/Taste%20vue/"/>
    <id>https://github.com/JayZangwill/blog/2016/08/14/Taste vue/</id>
    <published>2016-08-14T02:14:47.000Z</published>
    <updated>2018-03-19T13:55:03.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初尝vue"><a href="#初尝vue" class="headerlink" title="初尝vue"></a>初尝vue</h1><p>因为最近在做一个项目，感觉无从下手。因为老师给了一个漏洞百出的小破系统让我们自己研究做出个一模一样的出来(这里简单的吐槽一下)。在大神的建议下，开始学习vue，下面是我学习的一些笔记。</p><a id="more"></a><h1 id="Hellow-World"><a href="#Hellow-World" class="headerlink" title="Hellow World"></a>Hellow World</h1><p>vue的<strong>hellow world</strong>很简单：  </p><p>HTML：</p><pre><code>&lt;div id=&quot;app&quot;&gt;    {{message}}&lt;/div&gt;</code></pre><p>js：</p><pre><code>new Vue({    el: &apos;#app&apos;,    data: {        message: &apos;Hello Vue.js!&apos;            }        });</code></pre><p>结果：  </p><pre><code>Hello Vue.js!</code></pre><p>代码通过<a href="http://vuejs.org.cn/api/#el" target="_blank" rel="noopener">el</a>获取到HTML的节点，向节点中的<code></code>插入<a href="http://vuejs.org.cn/api/#data" target="_blank" rel="noopener">data</a>里的<code>message</code>的值。    </p><p><strong>注意</strong>HTML中的双括号里的名字和<code>data</code>里的名字一样</p><h1 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h1><p>双向绑定就是用表单控件的<code>v-model</code>指令实现通过表单里的内容改变，来让<code>data</code>里的对象值改变，最后体现到页面上： </p><p>在上面HTML代码的基础上加上： </p><pre><code>&lt;input type=&quot;text&quot; v-model=&quot;message&quot;&gt;</code></pre><p>就可以实现数据的双向绑定</p><h1 id="渲染列表"><a href="#渲染列表" class="headerlink" title="渲染列表"></a>渲染列表</h1><p>直接上代码：  </p><p>HTML： </p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;ul&gt;    &lt;li v-for=&quot;todo in todos&quot;&gt;        {{ todo.text }}    &lt;/li&gt;    &lt;/ul&gt;&lt;/div&gt;</code></pre><p>JS： </p><pre><code>new Vue({    el: &apos;#app&apos;,    data: {            todos: [                { text: &apos;Learn JavaScript&apos; },                { text: &apos;Learn Vue.js&apos; },                { text: &apos;Build Something Awesome&apos; }                    ]          }          });</code></pre><p>结果：  </p><pre><code>· Learn JavaScript· Learn Vue.js· Build Something Awesome</code></pre><p>这是用了vue的<a href="http://vuejs.org.cn/api/#v-for" target="_blank" rel="noopener">v-for</a>指令，用来循环渲染出数据。  </p><p>这个很像javascript里的<code>for-in</code>循环，<code>in</code>前面是自己定义的变量，<code>in</code>后面是要遍历的数组。这样，在这里通过<code>todo.text</code>就能取到<code>todos</code>数组里的东西，从而显示到页面上</p><h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><p>在vue中，可以使用指令<a href="http://vuejs.org.cn/api/#v-on" target="_blank" rel="noopener">v-on</a>监控对应的事件，可以缩写为<code>@</code>，例如： </p><pre><code>&lt;button v-on:click=&quot;dosomething&quot;&gt;Reverse Message&lt;/button&gt;</code></pre><p>缩写为：</p><pre><code>&lt;button @:click=&quot;dosomething&quot;&gt;Reverse Message&lt;/button&gt;</code></pre><p>实例：  </p><p>HTML： </p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;p&gt;{{ message }}&lt;/p&gt;    &lt;button @:click=&quot;reverseMessage&quot;&gt;Reverse Message&lt;/button&gt;&lt;/div&gt;</code></pre><p>JS： </p><pre><code>new Vue({    el: &apos;#app&apos;,    data: {        message: &apos;Hello Vue.js!&apos;    },    methods: {            reverseMessage: function () {            this.message = this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)            }        }    });</code></pre><p>当点击按钮时，Hellow Vue.js!的字母会变成!sj.euV olleH，再点击就会变回来。  </p><p><strong>注意</strong><code>methods</code>是用来放一些函数的，如果要想点击以后发生点什么，就把函数放到<code>methods</code>里。</p><h1 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h1><p>下列代码实现了向框里写一些东西后按回车就将框里的东西在下面显示出来，并且点击X按钮会删除对应的信息：  </p><p>HTML： </p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;input v-model=&quot;newTodo&quot; v-on:keyup.enter=&quot;addTodo&quot;&gt;    &lt;ul&gt;        &lt;li v-for=&quot;todo in todos&quot;&gt;            &lt;span&gt;{{ todo.text }}&lt;/span&gt;            &lt;button v-on:click=&quot;removeTodo($index)&quot;&gt;X&lt;/button&gt;        &lt;/li&gt;    &lt;/ul&gt;&lt;/div&gt;</code></pre><p>JS： </p><pre><code>new Vue({el: &apos;#app&apos;,data: {    newTodo: &apos;&apos;,    todos: [        { text: &apos;Add some todos&apos; }        ]},methods: {    addTodo: function () {    var text = this.newTodo.trim()    if (text) {        this.todos.push({ text: text })        this.newTodo = &apos;&apos;    }},  removeTodo: function (index) {  this.todos.splice(index, 1)}}});</code></pre><p>在HTML代码中用到了<code>v-on:keyup.enter</code>，这句代码意思是监听回车按钮抬起事件。如果，回车按键抬起则执行后面的方法。下面的<code>$index</code>是取得当前列项的索引。  </p><p><code>addTodo</code>方法是讲输入框输入的内容两边去掉空格，然后判断是否为空。如果不为空将这个字符串放到<code>todos</code>数组里，并且清空输入框。  </p><p><code>removeTodo</code>方法是将用户选中的字符串删除。  </p><p>当然，在学习中还接触了一些<em>es6</em>语法例如：</p><ul><li><p>const 常量声明</p></li><li><p>import 变量 from “路径” 和var something=require(“路径”)方法相似  </p></li></ul><p>以前没见过的的一些东西：</p><ul><li><p>window.localStorage.getItem(key)，获取本地存储的一些数据。可以这么用： <code>JSON.parse(window.localStorage.getItem(STORAGE_KEY) || &quot;[]&quot;)</code>意思是将获得的东西转化为JSON展示出来。</p></li><li><p>window.localStorage.setItem(key,data)，向本地存储一些数据，第一个参数是存储的键值，第二个是数据。可以这么用：<code>window.localStorage.setItem(key, JSON.stringify(data))</code>意思是讲数据变为JSON格式存储</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初尝vue&quot;&gt;&lt;a href=&quot;#初尝vue&quot; class=&quot;headerlink&quot; title=&quot;初尝vue&quot;&gt;&lt;/a&gt;初尝vue&lt;/h1&gt;&lt;p&gt;因为最近在做一个项目，感觉无从下手。因为老师给了一个漏洞百出的小破系统让我们自己研究做出个一模一样的出来(这里简单的吐槽一下)。在大神的建议下，开始学习vue，下面是我学习的一些笔记。&lt;/p&gt;
    
    </summary>
    
    
      <category term="基础" scheme="https://github.com/JayZangwill/blog/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="vue" scheme="https://github.com/JayZangwill/blog/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>sass基础</title>
    <link href="https://github.com/JayZangwill/blog/2016/08/09/Basics%20sass/"/>
    <id>https://github.com/JayZangwill/blog/2016/08/09/Basics sass/</id>
    <published>2016-08-09T11:27:28.000Z</published>
    <updated>2018-03-19T13:55:03.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sass语法糖"><a href="#sass语法糖" class="headerlink" title="sass语法糖"></a>sass语法糖</h1><p>用了两天的时间看了一下sass的一些语法，对于熟悉css的我来说,看sass基本没遇到什么困难。  </p><p>为了避免忘记，现在来写些sass的一些笔记。</p><a id="more"></a><h2 id="sass安装"><a href="#sass安装" class="headerlink" title="sass安装"></a>sass安装</h2><p>因为sass是基于<a href="http://rubyinstaller.org/downloads" target="_blank" rel="noopener">Ruby的</a>，所以点开链接下载吧。  </p><p>安装过程中在选择路径的下面有三个选项<img src="http://img.mukewang.com/54f561190001531806350474.jpg" alt="sass安装" title="选第二个">,其它的我就不多说了。  </p><p>然后打开命令行工具输入：  </p><pre><code>gem install sass</code></pre><p>稍等片刻，sass就安装好了。  </p><p>要更新的话在命令行工具输入：  </p><pre><code>gem update sass</code></pre><p>就得了</p><h2 id="开始编写sass"><a href="#开始编写sass" class="headerlink" title="开始编写sass"></a>开始编写sass</h2><p>新建一个<em>.scss</em>文件，用你喜欢的编译器打开  </p><p>sass语法和css语法类似像下面：</p><pre><code>body{margin:0;padding:0;}</code></pre><p>用<a href="https://www.npmjs.com/package/grunt-contrib-sass" target="_blank" rel="noopener">grunt</a>或者命令：</p><pre><code>sass &quot;要编译的Sass文件路径&quot;/&quot;文件名&quot;.scss:&quot;要输出CSS文件路径&quot;/&quot;文件名&quot;.css</code></pre><p>编译出来的css代码：</p><pre><code>body{margin:0;padding:0;}</code></pre><p>sass的<code>--watch &quot;要编译的Sass文件路径&quot;/&quot;文件名&quot;.scss:&quot;要输出CSS文件路径&quot;/&quot;文件名&quot;.css</code>命令也可以像<a href="https://www.npmjs.com/package/grunt-contrib-watch" target="_blank" rel="noopener">grunt-watch</a>一样监视文件的改动 </p><h3 id="用变量编写sass"><a href="#用变量编写sass" class="headerlink" title="用变量编写sass"></a>用变量编写sass</h3><p>sass也可以声明变量，声明变量的方法<code>$+变量名</code>，例如：</p><pre><code>$variable=100px;body{width:$variable;}</code></pre><p>编译出来就是：</p><pre><code>body{width:100px;}</code></pre><p>如果要声明默认变量，在声明的变量后面加个<code>!default</code>即可。</p><pre><code>$variable=50px !default;body{width:$variable;}</code></pre><p>编译出来就是：</p><pre><code>body{width:50px;}</code></pre><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>在sass中，可以使用选择器嵌套，属性嵌套，伪类嵌套,例如：</p><pre><code>nav{    a{        color:red;        margin:{            left:10px;            top:100px;        }        &amp;:hover        {            color:yellow;        }        &amp;:visited        {            color:black;        }    header &amp;{        color:green;    }    }}</code></pre><p>编译出来就是：</p><pre><code>nav a {color: red;margin-left: 10px;margin-top: 100px; }nav a:hover {color: yellow; }nav a:visited {color: black; }header nav a {color: green; }</code></pre><h3 id="混合宏"><a href="#混合宏" class="headerlink" title="混合宏"></a>混合宏</h3><p>  混合宏是用来处理重复的样式，就像js中的有名函数一样，只要声明了，就可以无数次调用  </p><p>  声明：</p><pre><code>@mixin name{      transform: scale(2);      -webkit-transform: scale(2);      -moz-transform:scale(2);      -o-transform: scale(2);      -ms-transform: scale(2);}</code></pre><p>  调用：</p><pre><code>img{  @include name;}</code></pre><p>编译出来就是：</p><pre><code>img{    transform: scale(2);    -webkit-transform: scale(2);    -moz-transform:scale(2);    -o-transform: scale(2);    -ms-transform: scale(2);}</code></pre><p>当然，混合宏也可以传参数：</p><pre><code> @mixin name($scale){    transform:$scale;    -webkit-transform:$scale;    -moz-transform:$scale;    -o-transform:$scale;    -ms-transform:$scale;}img{    @include name(scale(2));}</code></pre><p>编译出来就是：</p><pre><code>img {transform: scale(2);-webkit-transform: scale(2);-moz-transform: scale(2);-o-transform: scale(2);-ms-transform: scale(2); }</code></pre><p>这样，只要调用这个混合宏就不用像css那样写一堆兼容代码了，确实方便不少  </p><p>当然，混合宏也可以传多个参数，当参数过多时，可以用<code>...</code>代替，例如：</p><pre><code>@mixin box-shadow($shadows...){@if length($shadows) &gt;= 1 {    -webkit-box-shadow: $shadows;    box-shadow: $shadows;} @else {    $shadows: 0 0 2px rgba(#000,.25);    -webkit-box-shadow: $shadow;    box-shadow: $shadow;        }}.box {    @include box-shadow(0 0 1px rgba(#000,.5));}</code></pre><p>编译出来就是：</p><pre><code>.box {-webkit-box-shadow: 0 0 1px rgba(0, 0, 0, 0.5);box-shadow: 0 0 1px rgba(0, 0, 0, 0.5); }</code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>在css中有继承样式(子元素可以继承父元素的某些样式，例如font-family可以给子元素继承),在sass中可以使用<code>@extend</code>实现样式继承：</p><pre><code>.btn { border: 1px solid #ccc;padding: 6px 10px;font-size: 14px;}.btn-primary {background-color: #f36;color: #fff;@extend .btn;}</code></pre><p>编译出来就是：</p><pre><code>.btn,.btn-primary {border: 1px solid #ccc;padding: 6px 10px;font-size: 14px; }.btn-primary {background-color: #f36;color: #fff; }</code></pre><p>这样又减少了我们写重复的代码了！  </p><h3 id="占位符"><a href="#占位符" class="headerlink" title="占位符%"></a>占位符%</h3><p>Sass 中的占位符 <code>%</code> 功能是一个很强大，很实用的一个功能，因为 <code>%</code> 声明的代码，如果不被 <code>@extend</code> 调用的话，不会产生任何代码：</p><pre><code>%mt5 {margin-top: 5px;}%pt5{padding-top: 5px;}.btn{    @extend %mt5;}</code></pre><p>编译出来就是：</p><pre><code>.btn {margin-top: 5px; }</code></pre><h3 id="插值"><a href="#插值" class="headerlink" title="插值#{}"></a>插值<code>#{}</code></h3><p>使用 CSS 预处理器语言的一个主要原因是想使用 Sass 获得一个更好的结构体系。比如说你想写更干净的、高效的和面向对象的 CSS。Sass 中的插值就是重要的一部分，例如，最开始的那个混合宏还可以变为：</p><pre><code>@mixin name($transform,$scale){-webkit-#{$transform}:$scale;-moz-#{$transform}:$scale;-o-#{$transform}:$scale;-ms-#{$transform}:$scale;#{$transform}:$scale;}img{    @include name(transform,scale(2));}</code></pre><p>编译出来就是：</p><pre><code>img {-webkit-transform: scale(2);-moz-transform: scale(2);-o-transform: scale(2);-ms-transform: scale(2);transform: scale(2); }</code></pre><p>这样上面这个名为<em>name</em>的混合宏就可以变为更灵活，可以帮我们写各种css的兼容前缀。  </p><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>在css中只有calc()函数可以进行数字运算。然而，在sass中可以直接使用算术运算符来对数据进行运算：</p><pre><code>.box {width: 20px + 8in;//1in=96pxheight: 8in - 20px;//当对变量进行运算时-前面需要有空格font-size: 10px * 2;background-position:(100px/2);}</code></pre><p>编译出来就是：</p><pre><code>.box {width: 788px;height: 748px;font-size: 20px;background-position:50px;}</code></pre><p>但对于不同单位进行计算时，会报错，例如：</p><pre><code>.box {width: 20px + 1em;}</code></pre><p>编译时会报错：<code>Incompatible units: &#39;em&#39; and &#39;px&#39;.</code></p><h3 id="颜色运算"><a href="#颜色运算" class="headerlink" title="颜色运算"></a>颜色运算</h3><p>所有算数运算都支持颜色值，并且是分段运算的。也就是说，红、绿和蓝各颜色分段单独进行运算。如：</p><pre><code>p {color: #010203 + #040506;}</code></pre><p>计算公式为 01 + 04 = 05、02 + 05 = 07 和 03 + 06 = 09   </p><p>编译出来就是：</p><pre><code>p {color: #050709;}</code></pre><p>如果<code>#ffffff</code>再加的话编译出来就是<code>white</code>，同理<code>#000000</code>再减的话就是<code>black</code>  </p><p><code>#000000</code>不论乘什么除什么编译出来都是<code>black</code>，<code>#ffffff</code>不论乘什么编译出来都是<code>white</code></p><h3 id="字符运算"><a href="#字符运算" class="headerlink" title="字符运算"></a>字符运算</h3><p>在 Sass 中可以通过加法符号<code>+</code>来对字符串进行连接。例如：</p><pre><code>$content: &quot;Hello&quot; + &quot;&quot; + &quot;Sass!&quot;;.box:before {content: &quot; #{$content} &quot;;}</code></pre><p>编译出来就是：</p><pre><code>.box:before {content: &quot; Hello Sass! &quot;;}</code></pre><p>注意，如果有引号的字符串被添加了一个没有引号的字符串 （也就是，带引号的字符串在 + 符号左侧）， 结果会是一个有引号的字符串。 同样的，如果一个没有引号的字符串被添加了一个有引号的字符串 （没有引号的字符串在 + 符号左侧）， 结果将是一个没有引号的字符串。 例如：</p><pre><code>p:before {content: &quot;Foo &quot; + Bar;font-family: sans- + &quot;serif&quot;;}</code></pre><p>编译出来就是：</p><pre><code>p:before {content: &quot;Foo Bar&quot;;font-family: sans-serif; }</code></pre><p>至此sass基础第一篇文章就写完了，有什么意见的在下面留言吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;sass语法糖&quot;&gt;&lt;a href=&quot;#sass语法糖&quot; class=&quot;headerlink&quot; title=&quot;sass语法糖&quot;&gt;&lt;/a&gt;sass语法糖&lt;/h1&gt;&lt;p&gt;用了两天的时间看了一下sass的一些语法，对于熟悉css的我来说,看sass基本没遇到什么困难。  &lt;/p&gt;
&lt;p&gt;为了避免忘记，现在来写些sass的一些笔记。&lt;/p&gt;
    
    </summary>
    
    
      <category term="sass" scheme="https://github.com/JayZangwill/blog/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github快速搭建个人博客</title>
    <link href="https://github.com/JayZangwill/blog/2016/07/31/Hexo+github%20quickly%20build%20personal%20blog/"/>
    <id>https://github.com/JayZangwill/blog/2016/07/31/Hexo+github quickly build personal blog/</id>
    <published>2016-07-31T01:31:24.000Z</published>
    <updated>2018-03-19T13:55:03.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开场白"><a href="#开场白" class="headerlink" title="开场白"></a>开场白</h1><p>昨天用<em>hexo</em>搭建了自己的一个个人博客，费了不少劲，网上的资料有的不全，有的是太老了现在用不了，废话不多说了，直奔主题吧。</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>因为<em>hexo</em>是基于<em>node</em>的所以安装的时候非常方便</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p> 首先，我们来到<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node官网</a>下载node(建议下载稳定版的)安装包，下载完后运行安装程序，然后一直点下一步就行了(安装的时候建议使用默认路径)。  </p><p> 然后，打开<em>cmd</em>或者<em>git bash</em>输入：</p><pre><code>node -v</code></pre><p> 如果出现版本号说明安装成功。  </p><p> 接着，使用<em>node</em>自带的包管理工具<em>npm</em>安装<em>hexo</em>：</p><pre><code>输入npm install -g hexo(或者npm i -g hexo)</code></pre><p> 安装全局的<em>hexo</em>  </p><p> 上面的工作做完后来到<a href="https://github.com/">github官网</a>，没注册的先注册。然后点击<strong>New repository</strong>新建一个项目，名字为：<code>yourname.github.io</code> <strong>注意：一个账号只能有一个yourname.github.io，如果有了就随便新建一个项目</strong>。  </p><p> 新建完后，将仓库用</p><pre><code>git clone</code></pre><p> 命令克隆到本地，然后进入到本地仓库，在这里打开命令行工具(也就是cmd或者git bash。<strong>注意，路径是当前文件夹路径</strong>)输入</p><pre><code>hexo init</code></pre><p> 等一段时间后程序会帮你安装好<em>hexo</em>所需要的依赖。  </p><p> 安装完后，在命令行工具输入</p><pre><code>hexo generate(或者 hexo g)</code></pre><p>等待一段时间后，输入</p><pre><code>hexo server(或者hexo s)</code></pre><p>然后进入<a href="http://localhost:4000/" target="_blank" rel="noopener">localhost:4000</a>查看是否出现hexo的界面(有的人可能会发现样式没加载出来，不急，先往下看)   </p><p>如果出现界面的话，至此，所有准备工作基本完成，你离成功不远了！</p><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><p>首先，得找到根目录的<code>_config.yml</code>文件，打开以后，把最上面的<code>Site</code>的博客基本信息填写完毕。  </p><p><strong>特别注意</strong>：在冒号后面有空格，这个空格不能少  </p><p>然后来到下面的<code>URL</code>填写你博客的网址，例如我的：</p><pre><code>https:JayZangwill.github.io/blog</code></pre><p>然后看到下面的这个<code>root</code>填写的是<code>io</code>后面的内容，我的是<code>/blog</code>(如果没有，那就是<code>/</code><strong>特别注意</strong>：<code>root</code>后面不能为空)，之前说的样式没有加载很有可能是这个原因(如果还没加载出来，不急，再往下看)  </p><p>完之后，看到<code>_config.yml</code>文件的最下面，找到<code>deploy:</code>，另起一行输入：</p><pre><code>type: gitrepository: 你项目的sshbranch: gh-pages(如果博客地址是yourname.github.io，分支名就是master)</code></pre><p>至此，全局配置就完成了。这个时候，你需要再在命令行工具输入：</p><pre><code>hexo generate(或者 hexo g)hexo server(或者hexo s)</code></pre><p>如果标题变为你<code>_config.yml</code>文件最上面<code>title</code>输入的东西，那么文件就更新成功了！   </p><h2 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到<em>github</em></h2><p>在上传到github之前还需要安装一个东西，在命令行输入：</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>这样才能上传到<em>github</em>上，不然上传的话会报错  </p><p>之后在命令行工具输入：</p><pre><code>hexo deploy(或者hexo d)</code></pre><p>即可上传到<em>github</em>上。   </p><p>传到<em>github</em>上以后那些样式和图片肯定都能加载上去了，如果还不能加载的在浏览器里按f12点击<em>network</em>选项卡看看路径怎么错了之后再调调根目录的<code>_config.yml</code>文件里的<code>root</code>吧！  </p><h2 id="改变主题"><a href="#改变主题" class="headerlink" title="改变主题"></a>改变主题</h2><p>我在改变主题这里花了蛮多的时间，一是因为没有找到符合胃口的主题，还有就是在主题更新这里走了很大弯路。直奔主题吧，伤心的会议不要再提！  </p><p>首先，我用的是<a href="http://jacman.wuchong.me/2014/11/20/how-to-use-jacman" target="_blank" rel="noopener">jacman</a>主题，界面还算看得过去。过几天有时间了在自己写个主题。给的网址上面说得很清楚主题是如何安装和配置的，我就不在赘述。  </p><p>我想说的是，上面说的更新：</p><pre><code>cd themes/jacmangit pull origin master</code></pre><p>是主题的源文件更新，不是我们博客的更新，我们博客更新是：</p><pre><code>hexo g</code></pre><p>我在这就转了很大弯。。。我们在配置完主题的<code>_config.yml</code>文件后到根目录的命令行输入上面的命令更新博客后上传到<em>github</em>上就行了。  </p><p><strong>注意</strong>：如果上传到<em>github</em>上有些链接点不开或者有些图片出不来，需要到本地仓库的public文件夹里的<em>index.html</em>或者<em>css</em>文件夹里的<em>style.css</em>里讲一些链接还有图片的链接进行微调,然后再更新上传即可</p><h2 id="增加tags"><a href="#增加tags" class="headerlink" title="增加tags"></a>增加tags</h2><p>当文章多了以后，我们需要一个标签来标记，想要增加标签，首先得安装一个东西：  </p><pre><code>npm i hexo-generator-tag --save</code></pre><p>安装完后输入：  </p><pre><code>hexo new page &quot;tags&quot;   </code></pre><p>然后会发现source里多出个tags的文件夹，这个文件夹里有个md文件，点开，在第二条横线下加个  </p><pre><code>type: &quot;tags&quot;</code></pre><p>保存就好了。之后在根目录的命令行输入：  </p><pre><code>hexo new &quot;文件名&quot;  </code></pre><p>你会发现在文章开头有个<code>tags:</code>，在后面填上标签即可。  </p><p>同理，新建分类也是一样的把<code>tags</code>换成<code>categories</code>就行了  </p><h2 id="添加rss订阅"><a href="#添加rss订阅" class="headerlink" title="添加rss订阅"></a>添加rss订阅</h2><p>要想添加订阅功能首先得安装一个东西：</p><pre><code>npm install hexo-generator-feed</code></pre><p>安装完以后再输入：</p><pre><code>hexo g</code></pre><p>之后，你会发现在public里多了一个<code>atom.xml</code>文件，那就证明<em>rss</em>订阅功能已经添加了。  </p><p>至此，一个hexo博客就基本搭建完成了，如有疑问直接在下面留言，我有时间就会回复的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;开场白&quot;&gt;&lt;a href=&quot;#开场白&quot; class=&quot;headerlink&quot; title=&quot;开场白&quot;&gt;&lt;/a&gt;开场白&lt;/h1&gt;&lt;p&gt;昨天用&lt;em&gt;hexo&lt;/em&gt;搭建了自己的一个个人博客，费了不少劲，网上的资料有的不全，有的是太老了现在用不了，废话不多说了，直奔主题吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://github.com/JayZangwill/blog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>new blog</title>
    <link href="https://github.com/JayZangwill/blog/2016/07/30/new-blog/"/>
    <id>https://github.com/JayZangwill/blog/2016/07/30/new-blog/</id>
    <published>2016-07-30T03:05:50.000Z</published>
    <updated>2018-03-19T13:55:03.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新的开始"><a href="#新的开始" class="headerlink" title="新的开始"></a>新的开始</h1><ul><li>搭建了一天半的博客终于搭建好了，各种百度各种坑，加上各种烧脑，最终还是搭建好了。本来想用<a href="http://jekyll.bootcss.com/" target="_blank" rel="noopener">jekyll</a>搭建的，但是要安装一堆东西是在是麻烦，最重要的是还不能上传到github的gh-pages分支上，所以选择了比较简便的<a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a>，进入官网就能看到安装的方法。</li></ul><a id="more"></a><ul><li>在选主题的时候选了很久，原因之一就是没有好看的，最重要的还是当时不会配置主题文件，走了很大的弯路。在此吐槽一下<em>hexo</em>，还有众多的辣鸡教程，不过相对于以前来说<em>hexo</em>确实变得简便了许多。</li></ul><ul><li>至于我为何要搭建博客，最重要的原因就是前端学习的东西太多，有些东西会忘，所以搭个博客出来做做笔记，顺便做个技术分享。</li></ul><ul><li>最后还要吐槽一下用的这个主题名字叫<a href="http://jacman.wuchong.me/2014/11/20/how-to-use-jacman/" target="_blank" rel="noopener">jacman</a>，找了好久用的这个主题还算漂亮，教程也比较详细，但是唯一的缺点就是我多说评论框没出来，不知为何，等以后有时间了再换，蛤蛤蛤！</li></ul><ul><li>饭点到了，是时候出去觅食了，弄得好辛苦啊！！</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;新的开始&quot;&gt;&lt;a href=&quot;#新的开始&quot; class=&quot;headerlink&quot; title=&quot;新的开始&quot;&gt;&lt;/a&gt;新的开始&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;搭建了一天半的博客终于搭建好了，各种百度各种坑，加上各种烧脑，最终还是搭建好了。本来想用&lt;a href=&quot;http://jekyll.bootcss.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jekyll&lt;/a&gt;搭建的，但是要安装一堆东西是在是麻烦，最重要的是还不能上传到github的gh-pages分支上，所以选择了比较简便的&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo&lt;/a&gt;，进入官网就能看到安装的方法。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="心情" scheme="https://github.com/JayZangwill/blog/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
</feed>
